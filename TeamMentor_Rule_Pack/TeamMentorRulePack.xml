<?xml version="1.0" encoding="utf-16"?>
<RulePack xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="xmlns://www.fortifysoftware.com/schema/rules">
  <RulePackID>0c189268-a60d-446d-be32-179f2ce00760</RulePackID>
  <SKU>067b0374-df08-46af-8d9a-c9edd4d85803</SKU>
  <Name>TeamMentor Secure Coding Rules version 2.0</Name>
  <Version>2.0</Version>
  <Description>TeamMentor Secure Coding Rules version 2.0</Description>
  <Rules version="3.11">
    <RuleDefinitions>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>151e785d-8373-42fe-b5cc-77c8bdc6471c</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>79421c8f-92c4-445b-95ac-e8c53170efc9</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>Castle ActiveRecord</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>1288bf64-d100-4e47-ba26-1d9dcfc58fc5</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>Hibernate</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c73fedfd-f308-4895-a665-c1aa56aad5b3</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>iBatis Data Map</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>3ecb0f7b-e8f7-442f-a584-cf0b1b39088b</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>JDO</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>ae68717e-c257-49c2-8255-b1c31765832f</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>LINQ</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>9f56675c-1fba-4d1b-abd6-f4d0d26a7b0d</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>NHibernate</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>523858f6-ebe1-4626-ad9b-d5cc82504408</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>Persistence</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>2cdf9602-5e52-4a6a-bf5e-12774a0b45e9</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>SubSonic</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5fdf23f4-8ff9-4043-a3bb-2d7d10704b0e"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c92edd0d-f59a-4dd5-bed3-48a2190c895f"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a72f6958-7f22-4de1-8504-8106a9c302a4"&gt;C++ SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2abc6c1b-dd8b-41d3-ad24-c717807e43e9"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d9d68b19-e529-4aa8-89a5-e585a69be5bb</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/937f2173-5e39-48b6-bb3a-ecfd8f052bb0"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/e1066fc2-22e3-47b3-ac0d-34a6fa70da68"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/add8a099-08da-40cc-a202-5e083267cef7"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>e8388d47-b6e5-4c3b-9595-a2d9aacb638c</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>DOM</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/937f2173-5e39-48b6-bb3a-ecfd8f052bb0"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/e1066fc2-22e3-47b3-ac0d-34a6fa70da68"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/add8a099-08da-40cc-a202-5e083267cef7"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>092c89d2-da77-4c47-a7d0-a7177abcf13c</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>External Links</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/937f2173-5e39-48b6-bb3a-ecfd8f052bb0"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/e1066fc2-22e3-47b3-ac0d-34a6fa70da68"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/add8a099-08da-40cc-a202-5e083267cef7"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>294f0e3b-c37a-46cd-a424-fe17b97965e9</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>Persistent</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/937f2173-5e39-48b6-bb3a-ecfd8f052bb0"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/e1066fc2-22e3-47b3-ac0d-34a6fa70da68"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/add8a099-08da-40cc-a202-5e083267cef7"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c4e4f747-d149-4edb-ab65-33dc921ba63c</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>Poor Validation</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/937f2173-5e39-48b6-bb3a-ecfd8f052bb0"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/e1066fc2-22e3-47b3-ac0d-34a6fa70da68"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/add8a099-08da-40cc-a202-5e083267cef7"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>9a5facfc-35b2-472c-9bd9-5094cb66b373</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>Reflected</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/937f2173-5e39-48b6-bb3a-ecfd8f052bb0"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/e1066fc2-22e3-47b3-ac0d-34a6fa70da68"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/add8a099-08da-40cc-a202-5e083267cef7"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>df76736b-9370-4e3e-a424-08cab76ce7d8</RuleID>
        <RuleMatch>
          <Category>
            <Value>Command Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Applications often execute external commands as a part of their functionality. If the attacker is able to manipulate the choice of external commands or their parameters, the attacker may be able to use this functionality to execute arbitrary commands. If an attacker is able to execute arbitrary commands, he is typically able to take over the application and possibly take over the entire system. All applications that use external applications are affected by command injection vulnerabilities. Web applications are especially at risk, because they are exposed to the Internet. 
&lt;/p&gt;Impact

&lt;p&gt;Command injection allows an attacker to execute arbitrary commands. Using this vulnerability, an attacker can take full control of the application. If the attacker is able to leverage additional vulnerabilities or the server is not configured properly, this vulnerability may allow the attacker to take full control of the server. A command injection vulnerability acts as a virtual backdoor for an attacker to use the application and the server for his purposes. Any data that may be stored by or accessed by the application can also be compromised as a result of command injection. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent command injection vulnerabilities, validate all input, use parameterized APIs to execute external commands if such APIs are available, and avoid using external commands if possible. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all code that executes external applications and make sure that it does not use unvalidated input. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/ea00a8ee-1248-42b5-9954-439a93fb14d8"&gt;ASP.NET Command Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2e03d087-3614-4927-8d20-d9efc3f7bbc4"&gt;Java Command Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/db5bc41d-c414-497b-a7cf-2d63e7720fc6"&gt;C++ Command Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9178de03-1ccd-4987-b4e1-6db7a164fc4c"&gt;PHP Command Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/94e52aca-06b6-4747-9bc9-f0149208f18c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/94e52aca-06b6-4747-9bc9-f0149208f18c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>3e0a757a-5a21-49ba-aaf2-1fe5c20f90dc</RuleID>
        <RuleMatch>
          <Category>
            <Value>Code Correctness</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Regular expression denial of service vulnerabilities occur when the application applies regular expressions to attacker-supplied data in a manner that requires prohibitive computational resources to complete. 
&lt;/p&gt;&lt;p&gt;
Regular expression denial of service vulnerabilities affect all applications that use regular expressions on user-supplied data.
&lt;/p&gt;Impact

&lt;p&gt;Regular expression denial of service attacks result in the vulnerable application taking up a lot of CPU time and potentially causing the application server to become unresponsive. The attack scenario usually involves the attacker rapidly sending requests with malformed data that causes regular expressions used by the application on that data to take a very long time to compute. The result is that the application server will become unusable for the duration of the attack. In some cases, the application server might crash from overheating. If the application cannot use up 100% of the server's CPU time, the application alone might become unresponsive, while the rest of the server continues to function.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent regular expression denial of service attacks, check the length of user-supplied data before passing it to regular expressions.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against regular expression denial of service attacks, verify that the length of user-supplied data is checked before the data is passed to regular expressions.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9159f9ce-097c-4210-88ef-e2072e5da9f2"&gt;PHP Regular Expressions Denial of Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/132eb2b6-2d46-4fda-8d18-773ba1a1a919" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/132eb2b6-2d46-4fda-8d18-773ba1a1a919&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>0aace096-a9cb-4da4-b385-f4182ad327d1</RuleID>
        <RuleMatch>
          <Category>
            <Value>Code Correctness</Value>
          </Category>
          <Subcategory>
            <Value>Regular Expressions Denial of Service</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Regular expression denial of service vulnerabilities occur when the application applies regular expressions to attacker-supplied data in a manner that requires prohibitive computational resources to complete. 
&lt;/p&gt;&lt;p&gt;
Regular expression denial of service vulnerabilities affect all applications that use regular expressions on user-supplied data.
&lt;/p&gt;Impact

&lt;p&gt;Regular expression denial of service attacks result in the vulnerable application taking up a lot of CPU time and potentially causing the application server to become unresponsive. The attack scenario usually involves the attacker rapidly sending requests with malformed data that causes regular expressions used by the application on that data to take a very long time to compute. The result is that the application server will become unusable for the duration of the attack. In some cases, the application server might crash from overheating. If the application cannot use up 100% of the server's CPU time, the application alone might become unresponsive, while the rest of the server continues to function.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent regular expression denial of service attacks, check the length of user-supplied data before passing it to regular expressions.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against regular expression denial of service attacks, verify that the length of user-supplied data is checked before the data is passed to regular expressions.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9159f9ce-097c-4210-88ef-e2072e5da9f2"&gt;PHP Regular Expressions Denial of Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/132eb2b6-2d46-4fda-8d18-773ba1a1a919" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/132eb2b6-2d46-4fda-8d18-773ba1a1a919&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>890aceac-1678-412c-9561-966985674608</RuleID>
        <RuleMatch>
          <Category>
            <Value>Out-of-Bounds Read</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Out-of-bounds reads are a form of buffer overflow, except that instead of writing too much data, the application tries to read too much data from the buffer. Trying to read data at addresses beyond what is allocated for the data results in reading other data that happens to be at those addresses. Since this data is usually not what the application expects, the application usually crashes. If the attacker has crafted and placed data at those addresses in advance, and has also placed malicious code in memory in advance, the application might overwrite an instruction pointer with the attacker's data, thus allowing the attacker to redirect the execution flow to execute his malicious code. 
&lt;/p&gt;&lt;p&gt;
Out-of-bounds reads affect applications written in native code.
&lt;/p&gt;Impact

&lt;p&gt;Out-of-bounds reads typically result in the application crashing, but might sometimes lead to arbitrary code execution. For arbitrary code execution to be possible, the attacker has to be able to write to the memory that is accessed by the out-of-bounds read and the application has to use that data for instruction pointers. 
&lt;/p&gt;&lt;p&gt;
A common code execution attack vector targets web browsers. The exploit is placed on a web site. When the victim user opens the web site in a web browser, the web browser processes the exploit code. The exploit code usually downloads malicious software from the Internet and installs it, giving control of the compromised system to the attacker.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent out-of-bounds reads, check array indexes before use.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against out-of-bounds reads, verify that array indexes are checked before use.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5d4dd17c-34a6-470a-b2a7-83940d98c4e8"&gt;C++ Out-of-bounds Read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/857f6392-0870-4fec-8d58-1572e3bbb6d7" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/857f6392-0870-4fec-8d58-1572e3bbb6d7&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>5b0a693f-ca08-45ef-b076-04194aa89310</RuleID>
        <RuleMatch>
          <Category>
            <Value>Out-of-Bounds Read</Value>
          </Category>
          <Subcategory>
            <Value>Off-by-One</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Out-of-bounds reads are a form of buffer overflow, except that instead of writing too much data, the application tries to read too much data from the buffer. Trying to read data at addresses beyond what is allocated for the data results in reading other data that happens to be at those addresses. Since this data is usually not what the application expects, the application usually crashes. If the attacker has crafted and placed data at those addresses in advance, and has also placed malicious code in memory in advance, the application might overwrite an instruction pointer with the attacker's data, thus allowing the attacker to redirect the execution flow to execute his malicious code. 
&lt;/p&gt;&lt;p&gt;
Out-of-bounds reads affect applications written in native code.
&lt;/p&gt;Impact

&lt;p&gt;Out-of-bounds reads typically result in the application crashing, but might sometimes lead to arbitrary code execution. For arbitrary code execution to be possible, the attacker has to be able to write to the memory that is accessed by the out-of-bounds read and the application has to use that data for instruction pointers. 
&lt;/p&gt;&lt;p&gt;
A common code execution attack vector targets web browsers. The exploit is placed on a web site. When the victim user opens the web site in a web browser, the web browser processes the exploit code. The exploit code usually downloads malicious software from the Internet and installs it, giving control of the compromised system to the attacker.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent out-of-bounds reads, check array indexes before use.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against out-of-bounds reads, verify that array indexes are checked before use.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5d4dd17c-34a6-470a-b2a7-83940d98c4e8"&gt;C++ Out-of-bounds Read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/857f6392-0870-4fec-8d58-1572e3bbb6d7" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/857f6392-0870-4fec-8d58-1572e3bbb6d7&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>64482d40-6cf7-4369-ba1e-17914f2e62a3</RuleID>
        <RuleMatch>
          <Category>
            <Value>Out-of-Bounds Read</Value>
          </Category>
          <Subcategory>
            <Value>Signed Comparison</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Out-of-bounds reads are a form of buffer overflow, except that instead of writing too much data, the application tries to read too much data from the buffer. Trying to read data at addresses beyond what is allocated for the data results in reading other data that happens to be at those addresses. Since this data is usually not what the application expects, the application usually crashes. If the attacker has crafted and placed data at those addresses in advance, and has also placed malicious code in memory in advance, the application might overwrite an instruction pointer with the attacker's data, thus allowing the attacker to redirect the execution flow to execute his malicious code. 
&lt;/p&gt;&lt;p&gt;
Out-of-bounds reads affect applications written in native code.
&lt;/p&gt;Impact

&lt;p&gt;Out-of-bounds reads typically result in the application crashing, but might sometimes lead to arbitrary code execution. For arbitrary code execution to be possible, the attacker has to be able to write to the memory that is accessed by the out-of-bounds read and the application has to use that data for instruction pointers. 
&lt;/p&gt;&lt;p&gt;
A common code execution attack vector targets web browsers. The exploit is placed on a web site. When the victim user opens the web site in a web browser, the web browser processes the exploit code. The exploit code usually downloads malicious software from the Internet and installs it, giving control of the compromised system to the attacker.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent out-of-bounds reads, check array indexes before use.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against out-of-bounds reads, verify that array indexes are checked before use.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5d4dd17c-34a6-470a-b2a7-83940d98c4e8"&gt;C++ Out-of-bounds Read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/857f6392-0870-4fec-8d58-1572e3bbb6d7" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/857f6392-0870-4fec-8d58-1572e3bbb6d7&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4313f23b-fc25-4f87-b666-da89692eb4e6</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Request Forgery</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A cross site request forgery (CSRF) attack occurs when an attacker tricks a victim into loading a page that contains a malicious request. This request may be able to change the state of the web application, and is possible because the request is sent in the context of the logged in victim. For many sites, each request automatically sends the victim's credentials, such as the session cookie or authentication credentials. Due to this fact, there is no way to distinguish the false request from a legitimate request. CSRF vulnerabilities affect web applications that allow authenticated users to perform operations that are not available to guest users. 
&lt;/p&gt;&lt;p&gt;
Cross site request forgery attacks are known by other names including XSRF, session riding, one-click and zero-click attacks. A one-click attack refers to a link that causes a malicious action to be performed when a victim clicks on it. A zero-click attack is automatically executed upon page load. A common way to perform a zero-click attack is to embed the request in the source of an image. 
&lt;/p&gt;Impact

&lt;p&gt;CSRF allows the attacker to carry out actions on behalf of an authenticated user by tricking the user into visiting a malicious page or link. The exact impact depends on the functionality that is vulnerable to CSRF. The attacker will usually try to add a privileged user account for himself or to inject arbitrary code into the application. If either of those scenarios succeeds, the attacker gains full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent CSRF, include unique tokens in pages that invoke security sensitive operations, and require users to re-authenticate before performing sensitive operations. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against CSRF, ensure that unique tokens are used in pages that carry out sensitive operations, and that users are required to re-authenticate before performing sensitive operations.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/36d0c6a6-8a5c-4586-b0d5-917a9aff9557"&gt;ASP.NET Cross-Site Request Forgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f4f6aab8-f22e-4189-98bd-0a879cdedc40"&gt;Java Cross-Site Request Forgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/11baa288-69b3-4bbd-9133-e9675228e75d"&gt;PHP Cross-Site Request Forgery&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/62f78eb2-9eba-484c-ade3-7b54c2df9e5a" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/62f78eb2-9eba-484c-ade3-7b54c2df9e5a&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>5a0a4a4a-756e-4c92-81fc-2917241a23cf</RuleID>
        <RuleMatch>
          <Category>
            <Value>Dangerous File Inclusion</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Remote file inclusion (RFI) occurs when the application executes a file located on an external server, which is usually controlled by the attacker. This enables the attacker to execute arbitrary code as a part of the application, in effect allowing them to do anything that the application and the application platform can do. It could potentially result in the attacker gaining complete control of the system. RFI affects PHP applications. 
&lt;/p&gt;Impact

&lt;p&gt;Remote file inclusion allows an attacker to execute arbitrary code with great ease. Usually, RFI is exploited by specifying a URL to the attacker's script of choice as a part of the HTTP request. The vulnerable application loads the malicious script from the URL and executes it as a part of the application. The attacker will typically use a "web shell" as the attack script and as a result gain full control of the application platform. From there, the attacker may leverage additional vulnerabilities to take full control of the server. Actually, the attacker usually has no need to go this far, because taking full control of the application platform will usually give him all the access he wants. If there is something particularly valuable on the target network, the attacker may use the compromised server to pivot his way around the network and attack other machines on it.
&lt;/p&gt;&lt;p&gt;
RFI is extremely easy to exploit and to automate, which has led to RFI vulnerabilities being used to create powerful botnets in 2011. These botnets were used for numerous high-profile DDoS attacks. As a result, RFI became well known and a simple mitigation measure, disabling loading remote PHP scripts, became well known. At this point, RFI is relatively rare because most hosting providers know to disable loading external PHP scripts. RFI is still an extremely dangerous vulnerability that can be easily avoided by configuring PHP accordingly. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent RFI, configure PHP for security. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against RFI, ensure that PHP is configured for security. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/80380670-a6f7-431c-8709-b7fe5db60295"&gt;PHP Remote File Inclusion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/4a8034cb-e024-4ccb-a5f7-d7397dfc1371" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/4a8034cb-e024-4ccb-a5f7-d7397dfc1371&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>b93bf5b5-65e1-424c-af8d-935354c0825e</RuleID>
        <RuleMatch>
          <Category>
            <Value>Dynamic Code Evaluation</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Scripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application. Code injection vulnerabilities affect all scripting languages, but typically occur in web applications written in PHP.  
&lt;/p&gt;Impact

&lt;p&gt;An attacker gains full control of the application and the ability to use any operating system functions that are available to the scripting environment. Code injection is one of the most dangerous vulnerability types, if not the most dangerous. On top of being extremely powerful, code injection vulnerabilities are typically easy to exploit, especially in web applications. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent code injection vulnerabilities, validate all input and avoid using dangerous functions. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all the calls to dangerous functions and verify that data passed to them is sufficiently validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/96d8cd55-3e74-4e26-a1b7-62189556df0c"&gt;ASP.NET Code Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/940d6e95-fc25-4e9d-8545-2262ed6e99ba"&gt;PHP Code Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>43b8554c-db3d-49a2-a3d9-add7700c2a7e</RuleID>
        <RuleMatch>
          <Category>
            <Value>Dynamic Code Evaluation</Value>
          </Category>
          <Subcategory>
            <Value>Code Injection</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Scripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application. Code injection vulnerabilities affect all scripting languages, but typically occur in web applications written in PHP.  
&lt;/p&gt;Impact

&lt;p&gt;An attacker gains full control of the application and the ability to use any operating system functions that are available to the scripting environment. Code injection is one of the most dangerous vulnerability types, if not the most dangerous. On top of being extremely powerful, code injection vulnerabilities are typically easy to exploit, especially in web applications. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent code injection vulnerabilities, validate all input and avoid using dangerous functions. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all the calls to dangerous functions and verify that data passed to them is sufficiently validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/96d8cd55-3e74-4e26-a1b7-62189556df0c"&gt;ASP.NET Code Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/940d6e95-fc25-4e9d-8545-2262ed6e99ba"&gt;PHP Code Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d2f100ec-02c3-4281-9ac8-0ee6dd628f25</RuleID>
        <RuleMatch>
          <Category>
            <Value>Key Management</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Applications that use cryptography need a method for managing keys. One of the simplest ways to store the keys is to hard-code them into the application. However, this approach is not secure, because anyone with access to the application code is able to recover the keys. Once an attacker has recovered the keys, he can use them to decrypt sensitive data. This vulnerability applies to all applications that use cryptography. 
&lt;/p&gt;Impact

&lt;p&gt;An attacker that has access to the application code is able to recover any hard-coded cryptographic keys. If the attacker gets access to the data encrypted with those keys, he will be able to decrypt them. The trouble is that if the attacker is able to get the encrypted data, he can probably get the application code as well. Therefore, using hard-coded cryptographic keys essentially defeats the purpose of using encryption in the first place. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, provide a secure admin interface that allows for managing encryption keys, and use protected storage APIs to store the keys. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that a secure admin interface that allows for managing cryptographic keys is provided, and examine all code that uses encryption to ensure that encryption keys are stored using protected storage APIs.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/bbe58089-1a45-458f-81d2-12ad6c3c797c"&gt;ASP.NET Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1d41e495-bd7d-4961-8dd7-7d4cfaa37814"&gt;Java Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/07d18aec-f7cc-4932-a734-97e31a6f7f07"&gt;PHP Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>9a0cda61-8220-4fd0-bd50-f2ee9e6ae407</RuleID>
        <RuleMatch>
          <Category>
            <Value>Key Management</Value>
          </Category>
          <Subcategory>
            <Value>Hardcoded Encryption Key</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Applications that use cryptography need a method for managing keys. One of the simplest ways to store the keys is to hard-code them into the application. However, this approach is not secure, because anyone with access to the application code is able to recover the keys. Once an attacker has recovered the keys, he can use them to decrypt sensitive data. This vulnerability applies to all applications that use cryptography. 
&lt;/p&gt;Impact

&lt;p&gt;An attacker that has access to the application code is able to recover any hard-coded cryptographic keys. If the attacker gets access to the data encrypted with those keys, he will be able to decrypt them. The trouble is that if the attacker is able to get the encrypted data, he can probably get the application code as well. Therefore, using hard-coded cryptographic keys essentially defeats the purpose of using encryption in the first place. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, provide a secure admin interface that allows for managing encryption keys, and use protected storage APIs to store the keys. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that a secure admin interface that allows for managing cryptographic keys is provided, and examine all code that uses encryption to ensure that encryption keys are stored using protected storage APIs.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/bbe58089-1a45-458f-81d2-12ad6c3c797c"&gt;ASP.NET Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1d41e495-bd7d-4961-8dd7-7d4cfaa37814"&gt;Java Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/07d18aec-f7cc-4932-a734-97e31a6f7f07"&gt;PHP Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4cf89071-8e84-497c-ba8b-a11824b352e3</RuleID>
        <RuleMatch>
          <Category>
            <Value>Key Management</Value>
          </Category>
          <Subcategory>
            <Value>Empty Encryption Key</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. 
&lt;/p&gt;&lt;p&gt;
These issues affect all applications that use encryption.
&lt;/p&gt;Impact

&lt;p&gt;The impact of using weak encryption is that the attacker will be able to recover encrypted data. Encryption should be the last line of defense - ideally the attacker should not be able to get the encrypted data. However, if the attacker has compromised the system and downloaded the data, the encryption should prevent him from being able to make use of the data. If weak encryption is used, the attacker might be able to use the data. 
&lt;/p&gt;&lt;p&gt;
There is a broad range of possible attack scenarios that involve weak encryption, but in practice, the most common cases of weak encryption are also the most trivial. Many applications use algorithms that are not even meant to be used for encryption, such as XOR, ROT-13 and base64_encode to obfuscate data. To make things worse, that data is often placed in a location accessible by the attacker. In such cases, the attacker will be able to easily recover the obfuscated data. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent weak encryption issues, use strong cryptographic algorithms correctly, use strong encryption keys, and protect the encryption keys.
&lt;/p&gt;Application Check

&lt;p&gt;To ensure that strong encryption is used, verify that strong cryptographic algorithms are used correctly, strong encryption keys are used, and encryption keys are protected.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/40181068-beac-49cc-bd9a-bc4a208dad8d"&gt;ASP.NET Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/676b874a-f1e3-4957-855e-c386bd289e22"&gt;Java Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/bd46c04c-a6bc-44f7-bf00-646738e228c6"&gt;C++ Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/88aedbf8-d924-412b-a941-05f70d0c9820"&gt;PHP Weak Encryption&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a7c79b24-ef15-4de3-b4f5-87fa000d9c0f</RuleID>
        <RuleMatch>
          <Category>
            <Value>Key Management</Value>
          </Category>
          <Subcategory>
            <Value>Null Encryption Key</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. 
&lt;/p&gt;&lt;p&gt;
These issues affect all applications that use encryption.
&lt;/p&gt;Impact

&lt;p&gt;The impact of using weak encryption is that the attacker will be able to recover encrypted data. Encryption should be the last line of defense - ideally the attacker should not be able to get the encrypted data. However, if the attacker has compromised the system and downloaded the data, the encryption should prevent him from being able to make use of the data. If weak encryption is used, the attacker might be able to use the data. 
&lt;/p&gt;&lt;p&gt;
There is a broad range of possible attack scenarios that involve weak encryption, but in practice, the most common cases of weak encryption are also the most trivial. Many applications use algorithms that are not even meant to be used for encryption, such as XOR, ROT-13 and base64_encode to obfuscate data. To make things worse, that data is often placed in a location accessible by the attacker. In such cases, the attacker will be able to easily recover the obfuscated data. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent weak encryption issues, use strong cryptographic algorithms correctly, use strong encryption keys, and protect the encryption keys.
&lt;/p&gt;Application Check

&lt;p&gt;To ensure that strong encryption is used, verify that strong cryptographic algorithms are used correctly, strong encryption keys are used, and encryption keys are protected.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/40181068-beac-49cc-bd9a-bc4a208dad8d"&gt;ASP.NET Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/676b874a-f1e3-4957-855e-c386bd289e22"&gt;Java Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/bd46c04c-a6bc-44f7-bf00-646738e228c6"&gt;C++ Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/88aedbf8-d924-412b-a941-05f70d0c9820"&gt;PHP Weak Encryption&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>72f3721d-2c44-4ee8-a243-9d2e49809fd5</RuleID>
        <RuleMatch>
          <Category>
            <Value>LDAP Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Lightweight Directory Access Protocol (LDAP) is a widely used protocol for accessing directory services. Directories provide a set of attributes about people that are organized in a hierarchical manner.  LDAP Injection is a technique to exploit applications that use input from users to query an LDAP directory. LDAP injection has the potential to view, modify, or remove personal information about anyone in the directory. LDAP Injection applies to all applications that use LDAP. 
&lt;/p&gt;Impact

&lt;p&gt;LDAP injection allows an attacker to access and/or modify restricted data in the LDAP database. The attacker may leverage this vulnerability to view personal information of users in the database. The attacker may also leverage this vulnerability to give himself administrative privileges or to take over another account. Once the attacker has administrative privileges, he usually has full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent LDAP injection, validate all input. Ideally, parameterized APIs should be used for LDAP queries, but such APIs are usually not available. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all code that queries directories and verify that data included in the queries is sufficiently validated. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/26cf3a5c-3bbd-4239-b74f-f776df950ac8"&gt;ASP.NET LDAP Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/418cfb77-5d0a-4fd9-9825-1732cf40070d"&gt;Java LDAP Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/7fc7f4f3-2b0b-4d48-a18a-1f189361b651"&gt;C++ LDAP Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/8eba1b70-1b1a-4810-a819-1c212cf33099" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/8eba1b70-1b1a-4810-a819-1c212cf33099&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>f431a2d8-639f-4267-a5b9-dec9d661ddbb</RuleID>
        <RuleMatch>
          <Category>
            <Value>Log Forging</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Log forging occurs when an attacker is able to modify log entries recorded by the application. This usually occurs when the application writes some part of user input to the log files verbatim, which allows an attacker to insert special characters into the log files. Special characters may be processed by the application to change the contents of the files or render them unusable. The threat of log forging is that it may allow an attacker to hide traces of the attacks. In extreme cases, an attacker may forge logs to implicate someone else in the attacks. This vulnerability type affects all applications.  To check for adequate protection, make sure that all input is validated, and especially ensure that all user data that is logged is validated.
&lt;/p&gt;Impact

&lt;p&gt;Log forging allows an attacker to tamper with the logs. Usually, the attacker will try to insert special characters in an attempt to remove a part of the log or make it invisible from within the application. If the attacker can hide a part of the log, it allows him to hide some of the traces of his attack(s). This makes it harder to detect the attack when it is taking place and also makes it harder to investigate the attack afterwards. In a more extreme case that is rarely seen in practice, an attacker may insert data into the logs to implicate someone else in the attacks and send the investigators down the wrong path. These days, attackers usually rely on some form of proxy or tunnel technology to hide themselves, rather than modifying the logs, but this vulnerability type still exists.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input and validate user data which is logged.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that all input is validated, and especially ensure that all user data that is logged is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/700cbc96-fcfe-4ec7-b4cd-fc3eb8a98e40"&gt;ASP.NET Log Forging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/59f42764-e58b-4695-962f-5efdf1f36bd6"&gt;Java Log Forging&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/4f84a5c0-b513-4054-8f1a-1ff1367de03b" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/4f84a5c0-b513-4054-8f1a-1ff1367de03b&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c6f94465-b42f-4938-b62c-44c486a7349f</RuleID>
        <RuleMatch>
          <Category>
            <Value>Missing XML Validation</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Missing XML validation means that an attacker may cause the application to parse invalid XML data. This vulnerability type refers specifically to not validating XML against a schema. In itself, this might not cause any harm, but it may enable other vulnerabilities, such as XML Entity Injection. This vulnerability type affects all applications that parse XML data. 
&lt;/p&gt;Impact

&lt;p&gt;Missing XML validation may enable other attacks that exploit other vulnerabilities. The exact impact depends on the kind of other vulnerabilities that are enabled. The most likely and dangerous scenario is some form of XML injection attack, where the attack manipulates application data by sending malformed XML data. For example, if the application uses XML to store authentication credentials, the attacker may be able to send XML data that authenticates him as an administrative user, and he may then take over the application. For that to be possible, a number of other vulnerabilities in addition to missing XML validation would need to be present. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, validate untrusted XML data.  XML validation helps prevent attacks that exploit other vulnerabilities, and should always be used when untrusted XML data is processed.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that untrusted XML data is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/099d9a5b-3ac2-4acb-9192-5b6d7fafda34"&gt;ASP.NET Missing XML Validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fa554526-0e27-470f-ba6c-464c2250cfbd"&gt;Java Missing XML Validation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/907797a3-3e9c-4cd8-ac5d-261209092414" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/907797a3-3e9c-4cd8-ac5d-261209092414&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a497f128-c266-46bc-b37d-d4a08a67d548</RuleID>
        <RuleMatch>
          <Category>
            <Value>Missing XML Validation(validating_reader)</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Missing XML validation means that an attacker may cause the application to parse invalid XML data. This vulnerability type refers specifically to not validating XML against a schema. In itself, this might not cause any harm, but it may enable other vulnerabilities, such as XML Entity Injection. This vulnerability type affects all applications that parse XML data. 
&lt;/p&gt;Impact

&lt;p&gt;Missing XML validation may enable other attacks that exploit other vulnerabilities. The exact impact depends on the kind of other vulnerabilities that are enabled. The most likely and dangerous scenario is some form of XML injection attack, where the attack manipulates application data by sending malformed XML data. For example, if the application uses XML to store authentication credentials, the attacker may be able to send XML data that authenticates him as an administrative user, and he may then take over the application. For that to be possible, a number of other vulnerabilities in addition to missing XML validation would need to be present. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, validate untrusted XML data.  XML validation helps prevent attacks that exploit other vulnerabilities, and should always be used when untrusted XML data is processed.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that untrusted XML data is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/099d9a5b-3ac2-4acb-9192-5b6d7fafda34"&gt;ASP.NET Missing XML Validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fa554526-0e27-470f-ba6c-464c2250cfbd"&gt;Java Missing XML Validation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/907797a3-3e9c-4cd8-ac5d-261209092414" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/907797a3-3e9c-4cd8-ac5d-261209092414&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a5081bf7-8faa-4ea9-965c-8a8c2b947d3d</RuleID>
        <RuleMatch>
          <Category>
            <Value>XML External Entity Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;XML external entity (XXE) injection vulnerabilities occur when the XML processor allows the attacker to control data loaded into the XML document as "external entities." Some XML processors support a feature called "external entities" that allows loading XML data from a URI as a part of the document. If the attacker can define the URI from which the data is loaded, they can manipulate the data that gets loaded into the XML document. Thus, the attacker can potentially load arbitrary files on the server of his choosing into the document and be able to read them. 
&lt;/p&gt;&lt;p&gt;
XML external entity injection vulnerabilities affect applications that use XML and have the "external entity" function enabled.
&lt;/p&gt;Impact

&lt;p&gt;The impact of XML external entity injection vulnerabilities is information disclosure. XXE injection allows the attacker to read arbitrary files that can be loaded by the XML parser into the document. The attacker might be able to leverage this vulnerability to read settings from configuration files. If configuration files contain plain-text passwords for the database or the application, the attacker might be able to compromise the application and/or the database server. In practice, leveraging XXE injection for additional access is non-trivial and requires additional vulnerabilities, making it an impractical but real vulnerability.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent XML external entity injection vulnerabilities, disable the "external entities" feature.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that the "external entities" feature is disabled.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1c21c884-0644-4822-868a-20bc957875f7"&gt;ASP.NET XML External Entity (XXE) Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/6f0d3861-d0b8-4cb1-9fc3-92bb23d738e5" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/6f0d3861-d0b8-4cb1-9fc3-92bb23d738e5&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>71ffaf43-0eef-45e9-900e-1d429f023d46</RuleID>
        <RuleMatch>
          <Category>
            <Value>Session Fixation</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Session fixation vulnerabilities occur when the application doesn't sufficiently protect session identifiers. This allows an attacker to hijack active user sessions. 
&lt;/p&gt;&lt;p&gt;
Most web application platforms provide functionality that will handle session management in a reasonably secure manner. However, some programmers, especially new ones, write their own session management code that doesn't sufficiently protect session identifiers. Some common mistakes are including session identifiers in URLs or making session identifiers predictable. Including the session identifier in the URL allows an attacker to send a link that includes a session identifier of his choice to the victim user. If the victim user clicks on that link and then logs into the application, the attacker will be able to hijack the user's session by clicking on that same link after the user has authenticated. 
&lt;/p&gt;Impact

&lt;p&gt;Session fixation vulnerabilities allow attackers to perform actions on behalf of the application's users. The exact actions that the attacker can perform depend on what is made available by the application. One possible scenario would involve the attacker being able to assign himself a session identifier of an administrative user. If that administrative user can modify content on the site or upload files, the attacker will be able to upload backdoor code that will allow them to execute arbitrary code with the privileges of the application. At that point, the attacker will have full control of the application and its assets, including all user data. The attacker might then leverage additional exploits to elevate their privileges on the compromised server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent session fixation vulnerabilities, use platform provided session management.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against session fixation vulnerabilities, verify that platform provided session management is used.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/92bf559d-061b-4daa-be06-ee2665b1110f"&gt;Java Session Fixation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/fd3db9ad-33b8-41af-aba9-fc5fb12bb562" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/fd3db9ad-33b8-41af-aba9-fc5fb12bb562&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>094b0e87-d5bf-4556-b9d5-c97d0c05fc61</RuleID>
        <RuleMatch>
          <Category>
            <Value>Open Redirect</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Many web applications use URL redirection to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker may be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website. This vulnerability applies to all applications that use URL redirection. 
&lt;/p&gt;Impact

&lt;p&gt;Open redirects allow an attacker to send users to a malicious site via a legitimate-looking URL. Many users are tricked by the legitimate-looking URL into thinking that they are browsing a trusted site. The malicious site may have an authentic looking login page, which tempts unsuspecting users into entering their usernames and passwords. When personal information is entered into the malicious login page, it is recorded for the attacker's use. Once the attacker has valid user credentials, he can access or modify users' data in the application. If the attacker is able to take over an administrative account, he may gain full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, avoid using redirects altogether, if possible.  If redirects are necessary, avoid redirection based on user input if possible. If user input is necessary for redirects, use reference maps to limit permissible redirect destinations, and always validate destinations of redirects. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this problem, choose the application check that fits the above Countermeasures strategy that you have chosen:  Ensure that redirects are not used.  OR  Ensure that redirection is not based on user input.  OR  If user input is needed, ensure that reference maps are used to limit permissible redirect destinations, and always validate the destinations of redirects.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fdd2fa70-27b7-4399-ba3c-3b0b1bc7360b"&gt;ASP.NET Open Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/79aaa6c6-54bd-4a98-9649-77f81312085e"&gt;Java Open Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/279ad567-2b34-44ce-8e56-8d96770ba500"&gt;PHP Open Redirect&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/90608236-847e-47ff-bb8f-b551297a25af" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/90608236-847e-47ff-bb8f-b551297a25af&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>5e74e514-4079-4991-9198-8dc70265b8d6</RuleID>
        <RuleMatch>
          <Category>
            <Value>Missing Check against Null</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Missing check against null is not necessarily a vulnerability in itself, but is likely to result in null pointer dereference vulnerabilities. Null pointer dereference vulnerabilities occur when the application attempts to use a pointer/object reference that has a null value as if it has a valid value. If application code checks pointers/object references for null before using them, null pointer dereference vulnerabilities won't occur. 
&lt;/p&gt;&lt;p&gt;
Automated code scanners can easily detect whether pointers/object references are checked for null before being used and can point out potential trouble areas to the developers. 
&lt;/p&gt;&lt;p&gt;
Missing check against null issues affect all applications.
&lt;/p&gt;Impact

&lt;p&gt;If a pointer is not checked for null before being used, the application will crash. Sometimes, null pointer dereference results in execution of arbitrary code. Execution of arbitrary code requires the attacker to hijack the exception handler that is called when a null pointer dereference occurs; the exact mechanism for doing so depends on different platforms, and is only possible on some platforms. 
&lt;/p&gt;&lt;p&gt;
Both managed and unmanaged languages are subject to null pointer dereferences, but arbitrary code execution as a result of it affects only unmanaged languages. Applications written in managed languages will either crash or throw an error message as a result of null pointer dereference.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent missing check against null issues, check pointers/object references for null before using them. Usually, a pointer/object reference is passed as an argument to a function - in such situations, it is best to check these pointers/object references for null right in the very beginning of the function and throw an exception or return an error code if a null value is detected. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against these issues, make sure that pointers/object references are checked for null in the beginning of function definitions.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/8cdac89d-5f52-49fd-aea3-1d14d460a8c3"&gt;C++ Missing Check against Null&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ec38fb55-80b0-45ab-aa08-e0f681744234" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ec38fb55-80b0-45ab-aa08-e0f681744234&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>62c5eef6-46fd-4451-b279-4eb9749fabeb</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>ba0934e3-0d23-430b-9b1e-070efa0e9cc1</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Empty Password</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>8c523347-b032-487d-bae3-7068357effa2</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Empty Password in Configuration File</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>6f15f16d-7fb4-4199-8a1a-4a12004b6126</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Hardcoded Password</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>ac2ac729-457c-4002-a8ca-77ebf8030075</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Null Password</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4f6cff77-3c98-4d0f-84a5-74f6d11f38f5</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Password in Comment</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>0ce6e59f-972f-4c3e-907c-7a0865eef00d</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Password in Configuration File</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c1ff5925-5ff3-45cd-ac27-e9f0d205ef6a</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Password in Redirect</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c2371fa7-ff2d-42d3-8057-15b67ea35739</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Weak Cryptography</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. &lt;/p&gt;&lt;ul&gt;
&lt;li&gt;If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. &lt;/li&gt;
&lt;li&gt;If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. &lt;/li&gt;
&lt;li&gt;If passwords are hard-coded, then the attacker will be able to recover them by reverse engineering application code. The attacker has to get the copy of the code for that to be possible, but that is usually a minor obstacle and does not provide sufficient protection. &lt;/li&gt;
&lt;li&gt;If the password is blank or null, the purpose of authentication is largely defeated, as the attacker can log in without supplying a password at all. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
All applications that use authentication are potentially affected by insufficiently protected credential weakness vulnerabilities. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. 
&lt;/p&gt;&lt;p&gt;
Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords, and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords, and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b07ad2fb-1079-4097-a1ff-3991f1f64e05"&gt;ASP.NET Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/cad337fe-3564-4f00-9894-a23ab01abfe3"&gt;PHP Password Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1f4a41a3-1598-4a12-a63c-966d0c6ad77c"&gt;C++ Password Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17e3dc04-f31e-4f9b-9ab7-de34ad7088ac&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>5295cbf9-3c51-4b35-8847-5d1109ccbb4c</RuleID>
        <RuleMatch>
          <Category>
            <Value>Path Manipulation</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Some applications allow the user to choose what files to access. Some of these applications don't validate the selected file path sufficiently. This path traversal vulnerability allows an attacker to access files outside of the locations authorized by the application. Path traversal vulnerabilities typically affect web applications.  
&lt;/p&gt;Impact

&lt;p&gt;Using path traversal, an attacker is able to access files outside of the scope allowed by the application. The attacker may then access sensitive operating system files, and application configuration files that include connection strings, application source code, and other sensitive data. The attacker will usually attempt to leverage information gathered using path traversal to take full control of the application or the application server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, canonicalize all file paths and name input, validate all input, and perform access control checks for any filesystem access.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/ee22e5e0-0953-4276-b0e6-955becda5ee8"&gt;ASP.NET Path Traversal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a1d217c4-2d2f-4657-99cd-7e4cd69411bd"&gt;C++ Path Traversal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b88255fa-86f1-4d3b-9f7f-66bc144e985c"&gt;PHP Path Traversal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/b0a8079f-fda0-46d9-bc3b-20ac08334e75" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/b0a8079f-fda0-46d9-bc3b-20ac08334e75&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>9b233e1c-8bbf-4869-a30f-1aa47d2d71e2</RuleID>
        <RuleMatch>
          <Category>
            <Value>XPath Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;XPath injection is a type of vulnerability that allows attackers to execute arbitrary queries on XML databases. XPath injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XPath injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents. XPath injection applies to any application that uses XPath to query XML documents. 
&lt;/p&gt;Impact

&lt;p&gt;XPath injection attacks may allow an attacker to retrieve, manipulate, or destroy data stored in XML documents. The exact impact depends on the type of XML data that is exposed via XPath injection. If authentication data is exposed, the attacker is able to take over any user account. By taking over the administrator's account, the attacker is able to take full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input and use parameterized APIs if possible. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all code that uses XPath queries and make sure it does not include unvalidated user input. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c2ab8f50-3b6b-47a8-b530-c9a705bdf6c8"&gt;ASP.NET XPath Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f93eca13-f40e-4975-8c2c-d84829947672"&gt;Java XPath Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1a89b5be-d8eb-4948-9e87-079fa6bf8320"&gt;PHP XPath Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/5ef5eea8-07c2-41de-80f9-7f62aaf0e3c8" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/5ef5eea8-07c2-41de-80f9-7f62aaf0e3c8&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>6c870d06-7251-4c30-a5a6-f000cfb9a4b7</RuleID>
        <RuleMatch>
          <Category>
            <Value>XQuery Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;XQuery injection vulnerabilities occur when untrusted data is concatenated into XQuery queries, which allows the attacker to execute arbitrary queries. XQuery injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XQuery injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents. XQuery injection applies to any application that uses XQuery to query XML documents. 
&lt;/p&gt;Impact

&lt;p&gt;XQuery injection allows the attacker to execute arbitrary XQuery queries. XQuery injection attacks may allow an attacker to retrieve, manipulate, or destroy data stored in XML documents. The exact impact depends on the type of XML data that is exposed via XQuery injection. If authentication data is exposed, the attacker is able to take over any user account. By taking over the administrator's account, the attacker is able to take full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input.  
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all code that uses XQuery queries and make sure it does not include unvalidated user input.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/09e95598-89b6-43b9-b910-a2f0100648ce"&gt;PHP XQuery Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/33f09ecd-0d56-4609-a49b-5337461a13f9" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/33f09ecd-0d56-4609-a49b-5337461a13f9&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>98c53006-69f8-492e-8c27-3a396a428c2a</RuleID>
        <RuleMatch>
          <Category>
            <Value>XML Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;XML injection occurs when an attacker is able to supply data to the application that is interpreted as a part of an XML document in a manner that violates the intended use of XML by the application. XML injection vulnerabilities occur when untrusted data is allowed to be concatenated with XML data. Concatenating the attacker's data with XML allows the attacker to manipulate the syntax and the contents of the XML document and thus allows the attacker to modify the behavior of the application. 
&lt;/p&gt;&lt;p&gt;
This issue affects all applications that use XML.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of an XML injection vulnerability depends on the application. The most likely practical attack vector is that the attacker will be able to manipulate the business logic of the application. For example, the attacker might be able to change prices of items in an online store. If the application's authentication mechanism is affected, the attacker might be able to bypass authentication controls. 
&lt;/p&gt;&lt;p&gt;
Another likely scenario is that the attacker will use XML injection to perform cross-site scripting attacks by modifying XML data to include client-side scripts. The cross-site scripting vector requires that the XML data is included in Web pages without being properly encoded. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect against XML injection attacks, validate all input and use parameterized APIs to build XML documents (instead of concatenating user data into strings that contain XML data).
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against XML injection, verify that all input is validated and that parameterized APIs are used to build XML documents.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/61db0098-48cc-4d33-9441-315b800b0647"&gt;ASP.NET XML Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/96d2c85e-5db6-4380-b55c-798aaa3fac0b"&gt;Java XML Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/b220c5e1-4303-4fb5-910f-82f4a7cc470a"&gt;PHP XML Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c54b70d7-11bc-4102-a4e0-f3e468d00cb0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c54b70d7-11bc-4102-a4e0-f3e468d00cb0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>28e7c5e5-5452-42c6-a620-bdf550fa8eb6</RuleID>
        <RuleMatch>
          <Category>
            <Value>XSLT Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;XSLT injection occurs when the application concatenates untrusted data into an XSL stylesheet. This allows the attacker to manipulate the document that is produced when the XSL stylesheet is rendered by the user's browser. If the application server interprets the rendered document as code, XSLT injection will result in arbitrary code injection, but this is rare. Usually, documents produced using XSL stylesheets are not interpreted as code by the server, but can still contain scripts that will by interpreted by the user's browser, thus enabling cross-site scripting attacks. 
&lt;/p&gt;&lt;p&gt;
This issue affects all applications that use non-static XSL stylesheets.
&lt;/p&gt;Impact

&lt;p&gt;The most likely impacts of XSLT injection attacks are that the attacker will be able to manipulate the contents of the document produced by applying the stylesheet, and will be able to perform cross-site scripting attacks. 
&lt;/p&gt;&lt;p&gt;
If the document produced by applying the stylesheet is interpreted as code by the application, XSLT injection will result in a code injection vulnerability, but such cases are rare, because most XSLT processors don't treat produced documents as code by default. 
&lt;/p&gt;&lt;p&gt;
A real attacker would almost certainly choose cross-site scripting as the method to exploit XSLT injection. If XSLT injection is present in authentication code, which is impractical and therefore highly unlikely, the attacker might abuse this vulnerability to bypass authentication. Otherwise, there are few real scenarios where the attacker would want to manipulate the output of the XSLT parser for purposes other than cross-site scripting. The cross-site scripting exploit can be used to steal user's session identifiers, redirect them to other sites, and perform actions on the user's behalf in applications where the user is authenticated.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent XSLT injection vulnerabilities, validate all data and don't concatenate user data into XSL stylesheets.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against XSLT injection vulnerabilities, verify that all data is validated and that user data is not concatenated into XSL stylesheets.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0c03c774-eb34-4c5e-bbbb-c231fff51eb5"&gt;PHP XSLT Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/b9e5c990-5b4e-46cd-bb63-72d625fb75db" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/b9e5c990-5b4e-46cd-bb63-72d625fb75db&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>e1b1d3fe-adc2-45bc-bb68-288fb3b94d9d</RuleID>
        <RuleMatch>
          <Category>
            <Value>Null Dereference</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Null pointer dereference vulnerabilities occur when the application attempts to use a pointer/object reference that has a null value as if it has a valid value. If application code checks pointers/object references for null before using them, null pointer dereference vulnerabilities won't occur. 
&lt;/p&gt;&lt;p&gt;
Null pointer dereference issues affect all applications.
&lt;/p&gt;Impact

&lt;p&gt;If a pointer/object reference is not checked for null before being used, the application will crash. Sometimes, null pointer dereference results in execution of arbitrary code. Execution of arbitrary code requires the attacker to hijack the exception handler that is called when a null pointer dereference occurs; the exact mechanism for doing so depends on different platforms, and is only possible on some platforms. 
&lt;/p&gt;&lt;p&gt;
Both managed and unmanaged languages are subject to null pointer dereferences, but arbitrary code execution as a result of it affects only unmanaged languages. Applications written in managed languages will either crash or throw an error message as a result of null pointer dereference.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent null dereference vulnerabilities, check pointers/object references for null before using them. Usually, a pointer/object reference is passed as an argument to a function - in such situations, it is best to check these pointers/object references for null in the very beginning of the function and throw an exception or return an error code if a null value is detected.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that pointers/object references are checked for null in the beginning of function definitions or at least before the pointers or object references are used.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0222317d-61d3-4b11-955e-247bb66eb50a"&gt;Java Null Dereference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/ca78ad0b-1460-4884-a8f5-b31c864d7976"&gt;C++ Null Dereference&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/bf332de3-8258-4549-aa5c-c7b846ab355d" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/bf332de3-8258-4549-aa5c-c7b846ab355d&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c2cfcafd-2ce2-44e7-be07-a72244c7e021</RuleID>
        <RuleMatch>
          <Category>
            <Value>Double Free</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A double-free vulnerability occurs when application code attempts to release memory that used to be allocated but has already been released. Attempting to release memory that has already been released corrupts the data structures used by the application. This might result in a condition that allows the attacker to write arbitrary data into the application's memory space, essentially resulting in a buffer overflow, which may in turn lead to execution of arbitrary code. 
&lt;/p&gt;&lt;p&gt;
For a buffer overflow to occur as a result of a double-free vulnerability, the same memory has to be allocated for two different objects afterwards, and the attacker has to be able to write to one of these objects. If the attacker is able to write more data than is allocated for the smaller of the objects, a buffer overflow occurs. Exploitation attempts that don't result in arbitrary code execution will result in the application crashing, producing a denial of service condition. 
&lt;/p&gt;&lt;p&gt;
Double-free issues affect applications written in native code.
&lt;/p&gt;Impact

&lt;p&gt;A double-free vulnerability results in either a denial of service condition or execution of arbitrary code. Execution of arbitrary code is clearly a lot more dangerous and desirable for attackers. 
&lt;/p&gt;&lt;p&gt;
Multiple exploitation vectors are possible for double-free vulnerabilities, depending on the attack surface of the affected application. One common scenario is client-side web-browser attacks, where exploit code is uploaded to a web page as a part of the content. When the victim visits the malicious web page, the browser loads the exploit code and processes it either directly or via one of the installed plug-ins or applications. The vulnerable application or plug-in then executes the attacker's shell-code. (Shell-code refers to a small amount of highly optimized malicious code. The term stems from the fact that such code would usually spawn system command line shells for the attacker's use. This term now means any malicious payload that is included as a part of an exploit.) Browser vector shell-code usually downloads malicious software from the Internet and installs it, typically adding the compromised system to the attacker's botnet. 
&lt;/p&gt;&lt;p&gt;
Another attack vector is remote server-side exploitation, where the exploit is executed against a vulnerable remote network service with the goal of gaining access to the server. In this scenario, the shell-code will usually actually spawn a shell and bind it on a port for the attacker to connect to. (Binding a shell on a port means opening a network port and sending data from it directly to a command-line shell. This makes it easy for the attacker to send commands to execute on the compromised system.) The output from the shell is piped back to the port, so the attacker gets interactive command-line access to the compromised system. The privileges of the spawned shell are those of the compromised application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent double-free vulnerabilities, write code in such a way that provides a guarantee that allocated memory is freed only once.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against double-free vulnerabilities, verify that code is written in such a way that provides a guarantee that allocated memory is freed only once.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/a749782c-1f6b-4020-aea3-77046fabf428"&gt;C++ Double Free&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/edd65ef2-30f0-45bb-b51c-7cf5a08b6bc1" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/edd65ef2-30f0-45bb-b51c-7cf5a08b6bc1&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>250c2103-511c-4637-9fe5-24debc45e8a1</RuleID>
        <RuleMatch>
          <Category>
            <Value>Unreleased Resource</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Unreleased resource issues occur when an application locks or allocates a system resource for its use, but doesn't release the resource afterwards. It is common for these issues to be cumulative - often the same function that allocates additional resources for the application is called multiple times by the application, each time wasting more and more system resources. If the attacker can cause the application to call such a wasteful function continuously, he can cause the application to use up all the available system resources, typically causing the application to crash. After the application crashes, the system will usually free the resources allocated by the application and continue working. 
&lt;/p&gt;&lt;p&gt;
Unreleased resource issues affect all application types.
&lt;/p&gt;Impact

&lt;p&gt;Unreleased resource issues might result in Denial of Service conditions. If the attacker is able to exploit the unreleased resource issue to consume large amounts of system resources, he can make the application, and possibly the system, unresponsive.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent resource leaks, release all system resources after using them.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against resource leaks, make sure that all system resources are released after being used.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/be7eab47-34dd-4647-b65a-6541e1fab67b"&gt;C++ Unreleased Resource&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/f5f78214-e44f-4147-aed3-32bf78fb20db" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/f5f78214-e44f-4147-aed3-32bf78fb20db&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>397d8d86-1f8e-4c33-8266-3d5556a0377e</RuleID>
        <RuleMatch>
          <Category>
            <Value>Use After Free</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Use after free vulnerabilities occur when code attempts to use memory that has already been freed. Use after free vulnerabilities can be exploited to crash the application or to execute arbitrary code under certain circumstances. Different methods are available to the attacker for arbitrary code execution based on application specific conditions, such as whether the attacker can manipulate VFTable entries or reallocate freed memory. 
&lt;/p&gt;&lt;p&gt;
Use after free vulnerabilities affect applications written in native code.
&lt;/p&gt;Impact

&lt;p&gt;The impact of use after free vulnerabilities is usually Denial of Service as a result of the application crashing, and sometimes arbitrary code execution as well. One common double-free code execution attack vector targets web browsers or plug-ins. In this scenario, the attacker places exploit code on a web page. When the victim user visits the web page, the exploit is processed by the browser or by one of the installed plug-ins. The exploit code uses the vulnerability to download and execute malicious software, adding the victim user's system to the attacker's botnet. 
&lt;/p&gt;&lt;p&gt;
Another attack vector is remote server-side exploitation, where the exploit is executed against a remote vulnerable network service with the goal of gaining access to the server. In the remote server-side scenario, the shell-code will usually actually spawn a shell and bind it on a port for the attacker to connect to. Binding a shell on a port means opening a network port and sending data from it directly to a command-line shell, making it easy for the attacker to send commands to execute on the compromised system. The output from the shell is piped back to the port, so the attacker gets interactive command-line access to the compromised system. The privileges of the spawned shell are those of the compromised application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent use after free vulnerabilities, write code in a way that guarantees that pointers are not used after the memory that they point to has been deallocated.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against use after free vulnerabilities, verify that code is written in a way that guarantees that pointers are not used after the memory that they point to has been deallocated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2ee01615-0ed3-46ad-9a22-f1520a55cc1d"&gt;C++ Use After Free&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/aca8fc61-4b62-48a0-843a-1bdf8f19e34c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/aca8fc61-4b62-48a0-843a-1bdf8f19e34c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d7049862-efb6-4432-af5a-ab28869166cf</RuleID>
        <RuleMatch>
          <Category>
            <Value>Buffer Overflow</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
The vulnerability stems from the fact that manipulating the format string allows the attacker to manipulate the program behavior. The %s, %x, and other format tokens can be used to print data from the stack and sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token. Writing arbitrary data to arbitrary locations allows the attacker to place malicious code in memory and overwrite instruction pointers to redirect program execution flow to the malicious code. 
&lt;/p&gt;&lt;p&gt;
Format string vulnerabilities affect applications written in native code that use functions with format string parameters.
&lt;/p&gt;Impact

&lt;p&gt;Format string vulnerabilities allow the attacker to crash the application or to execute arbitrary code. The arbitrary code execution vector is clearly preferable to attackers. A common real-world scenario involves running format string exploits against a vulnerable application on a system on which the attacker already has a user account, with the goal of gaining additional privileges. In the privilege escalation scenario, the exploit is usually used to spawn a shell with super-user privileges. 
&lt;/p&gt;&lt;p&gt;
Another likely scenario is using format string exploits against remote network services to gain access to the server that is hosting those services. Upon successful exploitation, the attacker is able to execute arbitrary code with the privileges of the user account that is running the network service. The attacker will usually bind a shell to a port and then connect to it to have a command line interface to the compromised system. 
&lt;/p&gt;&lt;p&gt;
Real-world format string vulnerability exploitation is mostly focused on Linux and UNIX style operating systems. Thanks to highly effective automated code analysis tools, format string vulnerabilities are somewhat rare in popular applications.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent format string vulnerabilities, don't use functions with format string parameters, don’t hard-code format strings, and don't allow users to manipulate format strings.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that functions with format string parameters are not used, that format strings are not hard-coded, and that users cannot manipulate format strings.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9f06e83b-77bf-40b8-9f20-5f88e892630c"&gt;C++ Format String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>bf769f08-9099-4959-9bb1-205e5a8ee36e</RuleID>
        <RuleMatch>
          <Category>
            <Value>Buffer Overflow</Value>
          </Category>
          <Subcategory>
            <Value>Format String</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
The vulnerability stems from the fact that manipulating the format string allows the attacker to manipulate the program behavior. The %s, %x, and other format tokens can be used to print data from the stack and sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token. Writing arbitrary data to arbitrary locations allows the attacker to place malicious code in memory and overwrite instruction pointers to redirect program execution flow to the malicious code. 
&lt;/p&gt;&lt;p&gt;
Format string vulnerabilities affect applications written in native code that use functions with format string parameters.
&lt;/p&gt;Impact

&lt;p&gt;Format string vulnerabilities allow the attacker to crash the application or to execute arbitrary code. The arbitrary code execution vector is clearly preferable to attackers. A common real-world scenario involves running format string exploits against a vulnerable application on a system on which the attacker already has a user account, with the goal of gaining additional privileges. In the privilege escalation scenario, the exploit is usually used to spawn a shell with super-user privileges. 
&lt;/p&gt;&lt;p&gt;
Another likely scenario is using format string exploits against remote network services to gain access to the server that is hosting those services. Upon successful exploitation, the attacker is able to execute arbitrary code with the privileges of the user account that is running the network service. The attacker will usually bind a shell to a port and then connect to it to have a command line interface to the compromised system. 
&lt;/p&gt;&lt;p&gt;
Real-world format string vulnerability exploitation is mostly focused on Linux and UNIX style operating systems. Thanks to highly effective automated code analysis tools, format string vulnerabilities are somewhat rare in popular applications.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent format string vulnerabilities, don't use functions with format string parameters, don’t hard-code format strings, and don't allow users to manipulate format strings.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that functions with format string parameters are not used, that format strings are not hard-coded, and that users cannot manipulate format strings.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9f06e83b-77bf-40b8-9f20-5f88e892630c"&gt;C++ Format String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>2b994135-a5e1-41df-aa22-e8d0e721bbd9</RuleID>
        <RuleMatch>
          <Category>
            <Value>Buffer Overflow</Value>
          </Category>
          <Subcategory>
            <Value>Format String (%f/%F)</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
The vulnerability stems from the fact that manipulating the format string allows the attacker to manipulate the program behavior. The %s, %x, and other format tokens can be used to print data from the stack and sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token. Writing arbitrary data to arbitrary locations allows the attacker to place malicious code in memory and overwrite instruction pointers to redirect program execution flow to the malicious code. 
&lt;/p&gt;&lt;p&gt;
Format string vulnerabilities affect applications written in native code that use functions with format string parameters.
&lt;/p&gt;Impact

&lt;p&gt;Format string vulnerabilities allow the attacker to crash the application or to execute arbitrary code. The arbitrary code execution vector is clearly preferable to attackers. A common real-world scenario involves running format string exploits against a vulnerable application on a system on which the attacker already has a user account, with the goal of gaining additional privileges. In the privilege escalation scenario, the exploit is usually used to spawn a shell with super-user privileges. 
&lt;/p&gt;&lt;p&gt;
Another likely scenario is using format string exploits against remote network services to gain access to the server that is hosting those services. Upon successful exploitation, the attacker is able to execute arbitrary code with the privileges of the user account that is running the network service. The attacker will usually bind a shell to a port and then connect to it to have a command line interface to the compromised system. 
&lt;/p&gt;&lt;p&gt;
Real-world format string vulnerability exploitation is mostly focused on Linux and UNIX style operating systems. Thanks to highly effective automated code analysis tools, format string vulnerabilities are somewhat rare in popular applications.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent format string vulnerabilities, don't use functions with format string parameters, don’t hard-code format strings, and don't allow users to manipulate format strings.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that functions with format string parameters are not used, that format strings are not hard-coded, and that users cannot manipulate format strings.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9f06e83b-77bf-40b8-9f20-5f88e892630c"&gt;C++ Format String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>7a3b4f19-ba39-4b97-8255-41817b23f8fc</RuleID>
        <RuleMatch>
          <Category>
            <Value>Buffer Overflow</Value>
          </Category>
          <Subcategory>
            <Value>Off-by-One</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Buffer overflows occur when code can be manipulated to cause the application to write data beyond the limits of memory allocated for that data. In short, a buffer overflow happens when the application tries to write too much data into too little (memory) space. 
&lt;/p&gt;&lt;p&gt;
There are two types of buffer overflows: stack buffer overflows and heap buffer overflows. Stack buffer overflows are much easier to exploit, because the stack stores instruction pointers in addition to data buffers. By overwriting the instruction pointers in the stack, the attacker can redirect the application’s execution flow to data that he has placed somewhere in memory, thus allowing him to execute arbitrary code. The amount of code that can be executed is limited to the amount of data that can be placed by the attacker in memory. The stack buffer overflow is the "classic" buffer overflow that people usually refer to when they talk about buffer overflows. 
&lt;/p&gt;&lt;p&gt;
In contrast, heap buffer overflows are much harder to exploit, and they are thus less frequent and less well-known. The heap does not usually store instruction pointers, at least not in the same consistent manner that the stack does, which is why they are harder to exploit. To exploit a heap-based buffer overflow, the attacker tries to corrupt memory structures stored in the heap in an attempt to overwrite a function pointer to point to code that he has placed as data in memory. The idea is that when the application calls the function whose pointer has been overwritten, the attacker's code will be executed instead. The result of heap-based buffer overflows is also arbitrary code execution. 
&lt;/p&gt;&lt;p&gt;
A failed attempt for either type of buffer overflow will usually result in the application crashing, thus producing a denial of service condition. 
&lt;/p&gt;&lt;p&gt;
Buffer overflows affect applications using native code, especially applications written in C and C++.
&lt;/p&gt;Impact

&lt;p&gt;Attackers usually seek to exploit buffer overflows in order to execute arbitrary code with the privileges of the exploited application. However, not all buffer overflow vulnerabilities allow execution of arbitrary code. Most buffer overflow vulnerabilities allow crashing the application, which results in a denial of service condition, but this usually presents little interest to attackers. 
&lt;/p&gt;&lt;p&gt;
Buffer overflows became notorious because of vulnerabilities in network services that allowed attackers to execute code on the target systems remotely. Until Web 2.0, which opened new horizons for exploitation, the buffer overflow was the gold standard of malicious hacking. The usual attack scenario was that the attacker would run the exploit against a vulnerable target server and use the exploit to execute shell code, which would bind a shell to a port on the target server. Once a shell was bound to a port, the attacker would connect to the shell using a simple network tunnel, such as netcat or telnet, and execute commands on the target server with the privileges of the user account that was used by the compromised network service. 
&lt;/p&gt;&lt;p&gt;
Another attack vector targeted user applications and was known as the "client-side" exploit. The client-side scenario usually involved the user unwittingly loading exploit code into a vulnerable application, at which point the exploit code would execute the shell code. The shell code would download malicious code from the web and execute the malicious code on the user's system with the privileges of the compromised application. 
&lt;/p&gt;&lt;p&gt;
The impact of buffer overflow vulnerabilities might be mitigated by measures built into the operating system or added to the application by the compiler. Some exploits can bypass these measures, but if the exploit cannot bypass buffer overflow defenses, then arbitrary code execution will be reduced to denial of service. These defenses are not a replacement for writing code correctly - the proper defense against buffer overflows is to validate the size of copied data and the target buffer before copying.
&lt;/p&gt;&lt;p&gt;
The notoriety of buffer overflows and their extreme potential danger resulted in defenses being placed against it into most common operating systems. Combined with other security measures, such as improved network periphery defenses and increased popularity of managed languages, buffer overflows have become significantly less common. Let's not make any new ones. Follow the instructions below to prevent buffer overflows.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent buffer overflows, validate all input, validate the sizes of data and the buffer before copying, and avoid dangerous APIs.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against buffer overflows, verify that all input is validated, the sizes of data and target buffers are validated before copying, and dangerous APIs are not used.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0530569f-b6bb-4a31-ae68-55dac9f4781a"&gt;C++ Buffer Overflow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/bb7f7b3a-a3bc-498a-b4b4-88e7e8b02855" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/bb7f7b3a-a3bc-498a-b4b4-88e7e8b02855&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>5fe2f5a8-d557-48f2-8c7c-c8a0842dc702</RuleID>
        <RuleMatch>
          <Category>
            <Value>Buffer Overflow</Value>
          </Category>
          <Subcategory>
            <Value>Signed Comparison</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Buffer overflows occur when code can be manipulated to cause the application to write data beyond the limits of memory allocated for that data. In short, a buffer overflow happens when the application tries to write too much data into too little (memory) space. 
&lt;/p&gt;&lt;p&gt;
There are two types of buffer overflows: stack buffer overflows and heap buffer overflows. Stack buffer overflows are much easier to exploit, because the stack stores instruction pointers in addition to data buffers. By overwriting the instruction pointers in the stack, the attacker can redirect the application’s execution flow to data that he has placed somewhere in memory, thus allowing him to execute arbitrary code. The amount of code that can be executed is limited to the amount of data that can be placed by the attacker in memory. The stack buffer overflow is the "classic" buffer overflow that people usually refer to when they talk about buffer overflows. 
&lt;/p&gt;&lt;p&gt;
In contrast, heap buffer overflows are much harder to exploit, and they are thus less frequent and less well-known. The heap does not usually store instruction pointers, at least not in the same consistent manner that the stack does, which is why they are harder to exploit. To exploit a heap-based buffer overflow, the attacker tries to corrupt memory structures stored in the heap in an attempt to overwrite a function pointer to point to code that he has placed as data in memory. The idea is that when the application calls the function whose pointer has been overwritten, the attacker's code will be executed instead. The result of heap-based buffer overflows is also arbitrary code execution. 
&lt;/p&gt;&lt;p&gt;
A failed attempt for either type of buffer overflow will usually result in the application crashing, thus producing a denial of service condition. 
&lt;/p&gt;&lt;p&gt;
Buffer overflows affect applications using native code, especially applications written in C and C++.
&lt;/p&gt;Impact

&lt;p&gt;Attackers usually seek to exploit buffer overflows in order to execute arbitrary code with the privileges of the exploited application. However, not all buffer overflow vulnerabilities allow execution of arbitrary code. Most buffer overflow vulnerabilities allow crashing the application, which results in a denial of service condition, but this usually presents little interest to attackers. 
&lt;/p&gt;&lt;p&gt;
Buffer overflows became notorious because of vulnerabilities in network services that allowed attackers to execute code on the target systems remotely. Until Web 2.0, which opened new horizons for exploitation, the buffer overflow was the gold standard of malicious hacking. The usual attack scenario was that the attacker would run the exploit against a vulnerable target server and use the exploit to execute shell code, which would bind a shell to a port on the target server. Once a shell was bound to a port, the attacker would connect to the shell using a simple network tunnel, such as netcat or telnet, and execute commands on the target server with the privileges of the user account that was used by the compromised network service. 
&lt;/p&gt;&lt;p&gt;
Another attack vector targeted user applications and was known as the "client-side" exploit. The client-side scenario usually involved the user unwittingly loading exploit code into a vulnerable application, at which point the exploit code would execute the shell code. The shell code would download malicious code from the web and execute the malicious code on the user's system with the privileges of the compromised application. 
&lt;/p&gt;&lt;p&gt;
The impact of buffer overflow vulnerabilities might be mitigated by measures built into the operating system or added to the application by the compiler. Some exploits can bypass these measures, but if the exploit cannot bypass buffer overflow defenses, then arbitrary code execution will be reduced to denial of service. These defenses are not a replacement for writing code correctly - the proper defense against buffer overflows is to validate the size of copied data and the target buffer before copying.
&lt;/p&gt;&lt;p&gt;
The notoriety of buffer overflows and their extreme potential danger resulted in defenses being placed against it into most common operating systems. Combined with other security measures, such as improved network periphery defenses and increased popularity of managed languages, buffer overflows have become significantly less common. Let's not make any new ones. Follow the instructions below to prevent buffer overflows.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent buffer overflows, validate all input, validate the sizes of data and the buffer before copying, and avoid dangerous APIs.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against buffer overflows, verify that all input is validated, the sizes of data and target buffers are validated before copying, and dangerous APIs are not used.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0530569f-b6bb-4a31-ae68-55dac9f4781a"&gt;C++ Buffer Overflow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/bb7f7b3a-a3bc-498a-b4b4-88e7e8b02855" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/bb7f7b3a-a3bc-498a-b4b4-88e7e8b02855&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>1774f53c-c85c-4708-8010-cee9d13dfae7</RuleID>
        <RuleMatch>
          <Category>
            <Value>ASP.NET Misconfiguration</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>Description

&lt;p&gt;Unchecked error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. Unchecked error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Unchecked error conditions may result in other, more serious vulnerabilities. An unchecked error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce unchecked errors, that creates a fertile field for the attacker to look for vulnerabilities. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fb0341e3-41c2-43bc-99d4-d12a037c1edd"&gt;ASP.NET Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1a7d87d3-eee8-4f1c-ab46-7aec1b5479fb"&gt;Java Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a215f46e-70fb-4ca8-ae04-be8b285aa0e8</RuleID>
        <RuleMatch>
          <Category>
            <Value>ASP.NET Misconfiguration</Value>
          </Category>
          <Subcategory>
            <Value>Missing Error Handling</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>Description

&lt;p&gt;Unchecked error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. Unchecked error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Unchecked error conditions may result in other, more serious vulnerabilities. An unchecked error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce unchecked errors, that creates a fertile field for the attacker to look for vulnerabilities. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fb0341e3-41c2-43bc-99d4-d12a037c1edd"&gt;ASP.NET Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/1a7d87d3-eee8-4f1c-ab46-7aec1b5479fb"&gt;Java Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>e5d3fb08-a447-44a6-a2ea-7885bc841e3f</RuleID>
        <RuleMatch>
          <Category>
            <Value>Weak Encryption</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. 
&lt;/p&gt;&lt;p&gt;
These issues affect all applications that use encryption.
&lt;/p&gt;Impact

&lt;p&gt;The impact of using weak encryption is that the attacker will be able to recover encrypted data. Encryption should be the last line of defense - ideally the attacker should not be able to get the encrypted data. However, if the attacker has compromised the system and downloaded the data, the encryption should prevent him from being able to make use of the data. If weak encryption is used, the attacker might be able to use the data. 
&lt;/p&gt;&lt;p&gt;
There is a broad range of possible attack scenarios that involve weak encryption, but in practice, the most common cases of weak encryption are also the most trivial. Many applications use algorithms that are not even meant to be used for encryption, such as XOR, ROT-13 and base64_encode to obfuscate data. To make things worse, that data is often placed in a location accessible by the attacker. In such cases, the attacker will be able to easily recover the obfuscated data. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent weak encryption issues, use strong cryptographic algorithms correctly, use strong encryption keys, and protect the encryption keys.
&lt;/p&gt;Application Check

&lt;p&gt;To ensure that strong encryption is used, verify that strong cryptographic algorithms are used correctly, strong encryption keys are used, and encryption keys are protected.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/40181068-beac-49cc-bd9a-bc4a208dad8d"&gt;ASP.NET Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/676b874a-f1e3-4957-855e-c386bd289e22"&gt;Java Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/bd46c04c-a6bc-44f7-bf00-646738e228c6"&gt;C++ Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/88aedbf8-d924-412b-a941-05f70d0c9820"&gt;PHP Weak Encryption&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>37e86c17-b3a7-4bda-b0b9-72358dd15515</RuleID>
        <RuleMatch>
          <Category>
            <Value>Weak Encryption</Value>
          </Category>
          <Subcategory>
            <Value>Inadequate RSA Padding</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. 
&lt;/p&gt;&lt;p&gt;
These issues affect all applications that use encryption.
&lt;/p&gt;Impact

&lt;p&gt;The impact of using weak encryption is that the attacker will be able to recover encrypted data. Encryption should be the last line of defense - ideally the attacker should not be able to get the encrypted data. However, if the attacker has compromised the system and downloaded the data, the encryption should prevent him from being able to make use of the data. If weak encryption is used, the attacker might be able to use the data. 
&lt;/p&gt;&lt;p&gt;
There is a broad range of possible attack scenarios that involve weak encryption, but in practice, the most common cases of weak encryption are also the most trivial. Many applications use algorithms that are not even meant to be used for encryption, such as XOR, ROT-13 and base64_encode to obfuscate data. To make things worse, that data is often placed in a location accessible by the attacker. In such cases, the attacker will be able to easily recover the obfuscated data. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent weak encryption issues, use strong cryptographic algorithms correctly, use strong encryption keys, and protect the encryption keys.
&lt;/p&gt;Application Check

&lt;p&gt;To ensure that strong encryption is used, verify that strong cryptographic algorithms are used correctly, strong encryption keys are used, and encryption keys are protected.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/40181068-beac-49cc-bd9a-bc4a208dad8d"&gt;ASP.NET Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/676b874a-f1e3-4957-855e-c386bd289e22"&gt;Java Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/bd46c04c-a6bc-44f7-bf00-646738e228c6"&gt;C++ Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/88aedbf8-d924-412b-a941-05f70d0c9820"&gt;PHP Weak Encryption&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>cd661f39-8751-4e4b-9f9a-9dcfe8dda473</RuleID>
        <RuleMatch>
          <Category>
            <Value>Weak Encryption</Value>
          </Category>
          <Subcategory>
            <Value>Insufficient Key Size</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. 
&lt;/p&gt;&lt;p&gt;
These issues affect all applications that use encryption.
&lt;/p&gt;Impact

&lt;p&gt;The impact of using weak encryption is that the attacker will be able to recover encrypted data. Encryption should be the last line of defense - ideally the attacker should not be able to get the encrypted data. However, if the attacker has compromised the system and downloaded the data, the encryption should prevent him from being able to make use of the data. If weak encryption is used, the attacker might be able to use the data. 
&lt;/p&gt;&lt;p&gt;
There is a broad range of possible attack scenarios that involve weak encryption, but in practice, the most common cases of weak encryption are also the most trivial. Many applications use algorithms that are not even meant to be used for encryption, such as XOR, ROT-13 and base64_encode to obfuscate data. To make things worse, that data is often placed in a location accessible by the attacker. In such cases, the attacker will be able to easily recover the obfuscated data. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent weak encryption issues, use strong cryptographic algorithms correctly, use strong encryption keys, and protect the encryption keys.
&lt;/p&gt;Application Check

&lt;p&gt;To ensure that strong encryption is used, verify that strong cryptographic algorithms are used correctly, strong encryption keys are used, and encryption keys are protected.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/40181068-beac-49cc-bd9a-bc4a208dad8d"&gt;ASP.NET Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/676b874a-f1e3-4957-855e-c386bd289e22"&gt;Java Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/bd46c04c-a6bc-44f7-bf00-646738e228c6"&gt;C++ Weak Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/88aedbf8-d924-412b-a941-05f70d0c9820"&gt;PHP Weak Encryption&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/161382ce-e097-492d-aae1-90dac335aa66&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>43390628-c33c-479b-a3a2-832ea97b0fc1</RuleID>
        <RuleMatch>
          <Category>
            <Value>Weak Cryptographic Hash</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A weak cryptographic hash vulnerability occurs when the application uses a hashing algorithm that is considered to be less resistant to attack than the currently recommended algorithms, and/or the chosen hashing algorithm is not used appropriately. To use cryptographic hashing properly, a strong algorithm has to be used iteratively and with a salt. 
&lt;/p&gt;&lt;p&gt;
Note that cryptographic hashes are commonly used to protect stored passwords. 
&lt;/p&gt;&lt;p&gt;
This vulnerability type affects all applications that use cryptographic hashes. 
&lt;/p&gt;Impact

&lt;p&gt;The impact of using weak cryptographic hashing is that the attacker might be able to recover the hashed data. Cryptographic hashes are usually used to protect stored passwords as the last line of defense. If the attacker has compromised the application and downloaded the password hashes, he still won't be able to use them if the hashes are strong. If weak hashes are used, then the attacker will be able to easily crack them using brute-force attacks. In a brute-force attack, the attacker iteratively tries hashing all possible values and compares the hashes to the stored hashes. If weak hashing is used, even strong passwords can be easily compromised by brute-force attacks.
&lt;/p&gt;&lt;p&gt;
In practice, even when strong hashing is used, hashed passwords might be vulnerable to dictionary attacks. In a dictionary attack, the attacker hashes a list (dictionary) of possible passwords and compares them to the stored hashes. To protect against dictionary attacks, passwords must be strong in addition to strong hashing being used. 
&lt;/p&gt;&lt;p&gt;
After downloading the password hashes, the attacker will usually try to recover the passwords of the administrative users. The attacker must have already compromised the application to be able to get the hashes in the first place, but he may not have full access yet. By compromising the passwords of the administrative users, the attacker might gain access to other resources where the same password is used, or gain additional control of the application. 
&lt;/p&gt;&lt;p&gt;
One possible scenario is that the hashes are recovered using a SQL injection attack, then cracked, and then used by the attacker to take over the application completely. Another possible scenario is for the attacker to compromise the application, download and crack the hashes, hold on to the administrator password, and come back at a later time to take control of the application after the administrators thought they had regained control of the application. Lastly, a common occurrence has been that web sites have been hacked and the stored account details of their users have been published on the Internet. This is usually bad for the reputation of the affected web site, especially if the stored passwords are not adequately protected.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent weak cryptographic hashing vulnerabilities, use a strong hashing algorithm iteratively or use a key derivation algorithm, and use a unique salt for each hashed value.
&lt;/p&gt;Application Check

&lt;p&gt;To verify that cryptographic hashing is used properly, verify that strong hashing algorithms are used iteratively or key derivation algorithms are used, and that a unique salt is used for each hashed value.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/7cd2af83-de04-47ac-992c-945642fa579d"&gt;ASP.NET Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0010a1e4-6d8f-41a4-8eaf-d047398a34bc"&gt;Java Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/7d7de04c-96d1-4b2e-bf99-9ef0555f3332"&gt;PHP Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/30d4067e-2c33-425b-b439-18b849374a06"&gt;C++ Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/1c886700-46cb-4dfb-9e3b-8c95164aa4d4" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/1c886700-46cb-4dfb-9e3b-8c95164aa4d4&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>34bfb6dd-361e-49bb-a643-5b0fc01294e3</RuleID>
        <RuleMatch>
          <Category>
            <Value>Weak Cryptographic Hash</Value>
          </Category>
          <Subcategory>
            <Value>Hardcoded Salt</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A weak cryptographic hash vulnerability occurs when the application uses a hashing algorithm that is considered to be less resistant to attack than the currently recommended algorithms, and/or the chosen hashing algorithm is not used appropriately. To use cryptographic hashing properly, a strong algorithm has to be used iteratively and with a salt. 
&lt;/p&gt;&lt;p&gt;
Note that cryptographic hashes are commonly used to protect stored passwords. 
&lt;/p&gt;&lt;p&gt;
This vulnerability type affects all applications that use cryptographic hashes. 
&lt;/p&gt;Impact

&lt;p&gt;The impact of using weak cryptographic hashing is that the attacker might be able to recover the hashed data. Cryptographic hashes are usually used to protect stored passwords as the last line of defense. If the attacker has compromised the application and downloaded the password hashes, he still won't be able to use them if the hashes are strong. If weak hashes are used, then the attacker will be able to easily crack them using brute-force attacks. In a brute-force attack, the attacker iteratively tries hashing all possible values and compares the hashes to the stored hashes. If weak hashing is used, even strong passwords can be easily compromised by brute-force attacks.
&lt;/p&gt;&lt;p&gt;
In practice, even when strong hashing is used, hashed passwords might be vulnerable to dictionary attacks. In a dictionary attack, the attacker hashes a list (dictionary) of possible passwords and compares them to the stored hashes. To protect against dictionary attacks, passwords must be strong in addition to strong hashing being used. 
&lt;/p&gt;&lt;p&gt;
After downloading the password hashes, the attacker will usually try to recover the passwords of the administrative users. The attacker must have already compromised the application to be able to get the hashes in the first place, but he may not have full access yet. By compromising the passwords of the administrative users, the attacker might gain access to other resources where the same password is used, or gain additional control of the application. 
&lt;/p&gt;&lt;p&gt;
One possible scenario is that the hashes are recovered using a SQL injection attack, then cracked, and then used by the attacker to take over the application completely. Another possible scenario is for the attacker to compromise the application, download and crack the hashes, hold on to the administrator password, and come back at a later time to take control of the application after the administrators thought they had regained control of the application. Lastly, a common occurrence has been that web sites have been hacked and the stored account details of their users have been published on the Internet. This is usually bad for the reputation of the affected web site, especially if the stored passwords are not adequately protected.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent weak cryptographic hashing vulnerabilities, use a strong hashing algorithm iteratively or use a key derivation algorithm, and use a unique salt for each hashed value.
&lt;/p&gt;Application Check

&lt;p&gt;To verify that cryptographic hashing is used properly, verify that strong hashing algorithms are used iteratively or key derivation algorithms are used, and that a unique salt is used for each hashed value.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/7cd2af83-de04-47ac-992c-945642fa579d"&gt;ASP.NET Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0010a1e4-6d8f-41a4-8eaf-d047398a34bc"&gt;Java Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/7d7de04c-96d1-4b2e-bf99-9ef0555f3332"&gt;PHP Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/30d4067e-2c33-425b-b439-18b849374a06"&gt;C++ Weak Cryptographic Hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/1c886700-46cb-4dfb-9e3b-8c95164aa4d4" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/1c886700-46cb-4dfb-9e3b-8c95164aa4d4&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>2407800d-d600-4f99-9c2c-31235a83b49c</RuleID>
        <RuleMatch>
          <Category>
            <Value>String Termination Error</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;String termination errors occur when code relies on strings to be terminated by null when copying data to memory, but data that does not end with null is passed to that code. The result of string termination errors is buffer overflow: Overwriting instruction pointers in the stack allows the attacker to redirect the execution flow of the application to the data that the attacker has placed somewhere in memory, thus allowing the attacker to execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
String termination errors affect applications written in native code.
&lt;/p&gt;Impact

&lt;p&gt;The impact of string termination error vulnerabilities is arbitrary code execution. The likely attack vector depends on the type of the application. A vulnerable network service would imply a remote server-side exploit. A vulnerable system application would lead to a local privilege escalation exploit. A vulnerable user application would lead to a client-side network exploit.
&lt;/p&gt;&lt;p&gt;
A remote server-side exploit is when the attacker sends the exploit code as data to a remote server over the network. The exploit triggers the vulnerability and then executes malicious code, usually to spawn a shell on the server for the attacker to use over the network. This provides an interactive command line interface to the attacker, giving the attacker unauthorized access to the compromised server with the privileges of the compromised application.
&lt;/p&gt;&lt;p&gt;
A local privilege escalation exploit requires that the vulnerable application has higher privileges than the attacker already has, and that the attacker has access to the target system, including access to the vulnerable application. The attacker passes the exploit code to the vulnerable application, which triggers the vulnerability and runs malicious code with the elevated privileges of the compromised application. Usually, the targeted application has superuser privileges and the attacker abuses it to take full control of the system. The way to take full control of the system is usually to install a backdoor that runs with the administrative privileges of the compromised application.
&lt;/p&gt;&lt;p&gt;
A client-side network exploit involves the attacker placing exploit code as a trap somewhere on the Internet. Usually, exploit code is embedded into web pages, but it can also be delivered using e-mail, instant messages and other network applications. The important thing is that the target user downloads the exploit code and opens it with the vulnerable application. The exploit code then triggers the vulnerability, downloads malicious software from the Internet, and executes it. The malicious software gives control of the compromised system to the attacker.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent string termination errors, validate data length before copying.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against string termination errors, verify that data length is validated before copying.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f770b2db-081d-4808-a314-4803beb54a01"&gt;C++ String Termination Error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/86123ed3-c89a-469a-9438-3feaa21577b3" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/86123ed3-c89a-469a-9438-3feaa21577b3&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>f6e781de-bea4-44b3-a340-196693c2f765</RuleID>
        <RuleMatch>
          <Category>
            <Value>Uninitialized Variable</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An uninitialized variable is technically not a vulnerability in itself, but might result in unintended program behavior. The danger of uninitialized variables is that they might be used by code as if they are intended to hold their default value. The most likely outcome is that the application won't work correctly and, in some cases, it might crash. 
&lt;/p&gt;&lt;p&gt;
The uninitialized variable issue affects all applications.
&lt;/p&gt;Impact

&lt;p&gt;The impact of uninitialized variables is that the application won't work properly. The bugs introduced by not initializing variables usually are obvious in terms of user experience but have no security implications. In some extremely rare circumstances uninitialized variables might lead to other types of vulnerabilities. In practice, uninitialized variables are not something that attackers look for and are not in themselves exploitable. It is, however, considered good programming practice to always initialize variables before using them.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent uninitialized variable vulnerabilities, initialize variables before using them.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that variables are initialized before being used.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/d87dc143-4a28-43ac-a439-93226c7fb514"&gt;C++ Uninitialized Variable&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/168741c0-e42b-44af-9e22-30d5388c6b43" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/168741c0-e42b-44af-9e22-30d5388c6b43&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>dfeb85ee-7696-493c-9796-f2c2e76ee772</RuleID>
        <RuleMatch>
          <Category>
            <Value>Insecure Transport</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SSL/TLS should be used to protect any sensitive data in transit. Some applications don't use SSL even during authentication or when transmitting sensitive data, and an attacker may be able to intercept such data that is sent over the network unencrypted. 
&lt;/p&gt;&lt;p&gt;
This vulnerability applies to all applications that send sensitive data over the network. 
&lt;/p&gt;Impact

&lt;p&gt;Transmitting data without using SSL allows attackers to intercept sensitive information using man-in-the-middle attacks. There are many different attack scenarios that are enabled by not using SSL. One common attack vector is exposed by the Firesheep tool. The Firesheep tool monitors open wireless networks for information about user sessions for some social networking web sites. Once that information has been sniffed from the network, the attacker is able to take over the user's session. Taking over the user's session allows the attacker to view the victim user's data and to impersonate him. This attack would not be possible if the target sites used SSL. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent insecure transport vulnerabilities, use SSL for all sensitive communications, configure SSL to use strong cipher suites, and use valid certificates. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that SSL is used for all sensitive communications, SSL is configured to use strong cipher suites, and valid certificates are used. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/c6852bd5-91b9-4daa-a472-7a1035d299fc"&gt;PHP Insecure Transport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/17ecc589-9be2-4429-8dc4-9f61556f63b1" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/17ecc589-9be2-4429-8dc4-9f61556f63b1&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>591ccf62-37b9-4cb9-b0da-7f4bee6d4488</RuleID>
        <RuleMatch>
          <Category>
            <Value>Integer Overflow</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Integer overflows occur when the application tries to assign a number that is too large for the variable data type that it is being assigned to. Integer data types have a finite amount of possible values, which means that each integer variable has a minimum and a maximum value. Trying to assign a number to an integer variable that is greater than its maximum value results in an integer overflow. Trying to assign a number to an integer variable that is smaller than its minimum value results in an integer underflow. The minimum and maximum values for each data type are different for different platforms, but there are some generally agreed-upon conventions. 
&lt;/p&gt;&lt;p&gt;
The exact behavior of the application code when an integer overflow occurs depends on the platform. Most commonly, the value of the integer variable will "wrap-around". The "wrap-around" effect can be described as a dial spinning past its maximum value to start again at its lowest value. For example, advancing a clock by two hours from 9 o'clock will bring it to 11 o'clock; advancing that same clock by two more hours will bring it to 1 o'clock. 1 is a smaller integer value than 11, because the values "wrapped-around". 
&lt;/p&gt;&lt;p&gt;
The underlying cause of integer overflows is usually assigning the products of calculations with large numbers to integer variables and using untrusted data for numerical calculations. 
&lt;/p&gt;Impact

&lt;p&gt;The impact of integer overflow vulnerabilities depends on many variables, but usually results in the application crashing, the attacker abusing business logic, and sometimes execution of arbitrary code. One of the most likely scenarios involving integer overflows is when an integer is being used as the index for a loop—if the attacker manipulates the index value, he can cause the loop to perform in an unexpected manner and crash the application. 
&lt;/p&gt;&lt;p&gt;
Execution of arbitrary code using integer overflows usually occurs when a vulnerable integer variable is used to control the amount of memory allocated for data. If the attacker can manipulate the amount of memory allocated and the data placed into that memory, he can usually execute arbitrary code with the privileges of the application. Such a vulnerability is actually a form of buffer overflow, but it relies on the integer overflow to be exploitable. In such cases, operating system and platform specific defenses against buffer overflows that are deployed on the target system might mitigate the vulnerability. However, generally speaking, integer overflow based buffer overflows result in arbitrary code execution and can be difficult to detect with code analysis.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent integer overflows, validate all input, and check results of calculations for maximum and minimum values before assigning them to integer variables.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against integer overflows, verify that all input is validated, and results of calculations are checked for maximum and minimum values before assigning them to integer variables.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/2674f188-5758-47f2-b0f1-c2286999d166"&gt;C++ Integer Overflow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/abc12d73-61ae-4736-b123-144aaea5254b" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/abc12d73-61ae-4736-b123-144aaea5254b&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>ef071d5f-7b57-4863-8165-b6ab6ec6c017</RuleID>
        <RuleMatch>
          <Category>
            <Value>String Termination Error(truncate)</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;String termination errors occur when code relies on strings to be terminated by null when copying data to memory, but data that does not end with null is passed to that code. The result of string termination errors is buffer overflow: Overwriting instruction pointers in the stack allows the attacker to redirect the execution flow of the application to the data that the attacker has placed somewhere in memory, thus allowing the attacker to execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
String termination errors affect applications written in native code.
&lt;/p&gt;Impact

&lt;p&gt;The impact of string termination error vulnerabilities is arbitrary code execution. The likely attack vector depends on the type of the application. A vulnerable network service would imply a remote server-side exploit. A vulnerable system application would lead to a local privilege escalation exploit. A vulnerable user application would lead to a client-side network exploit.
&lt;/p&gt;&lt;p&gt;
A remote server-side exploit is when the attacker sends the exploit code as data to a remote server over the network. The exploit triggers the vulnerability and then executes malicious code, usually to spawn a shell on the server for the attacker to use over the network. This provides an interactive command line interface to the attacker, giving the attacker unauthorized access to the compromised server with the privileges of the compromised application.
&lt;/p&gt;&lt;p&gt;
A local privilege escalation exploit requires that the vulnerable application has higher privileges than the attacker already has, and that the attacker has access to the target system, including access to the vulnerable application. The attacker passes the exploit code to the vulnerable application, which triggers the vulnerability and runs malicious code with the elevated privileges of the compromised application. Usually, the targeted application has superuser privileges and the attacker abuses it to take full control of the system. The way to take full control of the system is usually to install a backdoor that runs with the administrative privileges of the compromised application.
&lt;/p&gt;&lt;p&gt;
A client-side network exploit involves the attacker placing exploit code as a trap somewhere on the Internet. Usually, exploit code is embedded into web pages, but it can also be delivered using e-mail, instant messages and other network applications. The important thing is that the target user downloads the exploit code and opens it with the vulnerable application. The exploit code then triggers the vulnerability, downloads malicious software from the Internet, and executes it. The malicious software gives control of the compromised system to the attacker.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent string termination errors, validate data length before copying.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against string termination errors, verify that data length is validated before copying.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f770b2db-081d-4808-a314-4803beb54a01"&gt;C++ String Termination Error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/86123ed3-c89a-469a-9438-3feaa21577b3" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/86123ed3-c89a-469a-9438-3feaa21577b3&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>0834dda8-b05f-4adb-aea6-d907c1ffa105</RuleID>
        <RuleMatch>
          <Category>
            <Value>Format String</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
The vulnerability stems from the fact that manipulating the format string allows the attacker to manipulate the program behavior. The %s, %x, and other format tokens can be used to print data from the stack and sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token. Writing arbitrary data to arbitrary locations allows the attacker to place malicious code in memory and overwrite instruction pointers to redirect program execution flow to the malicious code. 
&lt;/p&gt;&lt;p&gt;
Format string vulnerabilities affect applications written in native code that use functions with format string parameters.
&lt;/p&gt;Impact

&lt;p&gt;Format string vulnerabilities allow the attacker to crash the application or to execute arbitrary code. The arbitrary code execution vector is clearly preferable to attackers. A common real-world scenario involves running format string exploits against a vulnerable application on a system on which the attacker already has a user account, with the goal of gaining additional privileges. In the privilege escalation scenario, the exploit is usually used to spawn a shell with super-user privileges. 
&lt;/p&gt;&lt;p&gt;
Another likely scenario is using format string exploits against remote network services to gain access to the server that is hosting those services. Upon successful exploitation, the attacker is able to execute arbitrary code with the privileges of the user account that is running the network service. The attacker will usually bind a shell to a port and then connect to it to have a command line interface to the compromised system. 
&lt;/p&gt;&lt;p&gt;
Real-world format string vulnerability exploitation is mostly focused on Linux and UNIX style operating systems. Thanks to highly effective automated code analysis tools, format string vulnerabilities are somewhat rare in popular applications.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent format string vulnerabilities, don't use functions with format string parameters, don’t hard-code format strings, and don't allow users to manipulate format strings.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that functions with format string parameters are not used, that format strings are not hard-coded, and that users cannot manipulate format strings.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9f06e83b-77bf-40b8-9f20-5f88e892630c"&gt;C++ Format String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a0b0ff92-7509-4a31-b48b-9cf3584df805</RuleID>
        <RuleMatch>
          <Category>
            <Value>Format String</Value>
          </Category>
          <Subcategory>
            <Value>Argument Number Mismatch</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
The vulnerability stems from the fact that manipulating the format string allows the attacker to manipulate the program behavior. The %s, %x, and other format tokens can be used to print data from the stack and sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token. Writing arbitrary data to arbitrary locations allows the attacker to place malicious code in memory and overwrite instruction pointers to redirect program execution flow to the malicious code. 
&lt;/p&gt;&lt;p&gt;
Format string vulnerabilities affect applications written in native code that use functions with format string parameters.
&lt;/p&gt;Impact

&lt;p&gt;Format string vulnerabilities allow the attacker to crash the application or to execute arbitrary code. The arbitrary code execution vector is clearly preferable to attackers. A common real-world scenario involves running format string exploits against a vulnerable application on a system on which the attacker already has a user account, with the goal of gaining additional privileges. In the privilege escalation scenario, the exploit is usually used to spawn a shell with super-user privileges. 
&lt;/p&gt;&lt;p&gt;
Another likely scenario is using format string exploits against remote network services to gain access to the server that is hosting those services. Upon successful exploitation, the attacker is able to execute arbitrary code with the privileges of the user account that is running the network service. The attacker will usually bind a shell to a port and then connect to it to have a command line interface to the compromised system. 
&lt;/p&gt;&lt;p&gt;
Real-world format string vulnerability exploitation is mostly focused on Linux and UNIX style operating systems. Thanks to highly effective automated code analysis tools, format string vulnerabilities are somewhat rare in popular applications.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent format string vulnerabilities, don't use functions with format string parameters, don’t hard-code format strings, and don't allow users to manipulate format strings.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that functions with format string parameters are not used, that format strings are not hard-coded, and that users cannot manipulate format strings.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9f06e83b-77bf-40b8-9f20-5f88e892630c"&gt;C++ Format String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>e342860a-5d19-4963-95d8-604552ba2f29</RuleID>
        <RuleMatch>
          <Category>
            <Value>Format String</Value>
          </Category>
          <Subcategory>
            <Value>Argument Type Mismatch</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. 
&lt;/p&gt;&lt;p&gt;
The vulnerability stems from the fact that manipulating the format string allows the attacker to manipulate the program behavior. The %s, %x, and other format tokens can be used to print data from the stack and sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token. Writing arbitrary data to arbitrary locations allows the attacker to place malicious code in memory and overwrite instruction pointers to redirect program execution flow to the malicious code. 
&lt;/p&gt;&lt;p&gt;
Format string vulnerabilities affect applications written in native code that use functions with format string parameters.
&lt;/p&gt;Impact

&lt;p&gt;Format string vulnerabilities allow the attacker to crash the application or to execute arbitrary code. The arbitrary code execution vector is clearly preferable to attackers. A common real-world scenario involves running format string exploits against a vulnerable application on a system on which the attacker already has a user account, with the goal of gaining additional privileges. In the privilege escalation scenario, the exploit is usually used to spawn a shell with super-user privileges. 
&lt;/p&gt;&lt;p&gt;
Another likely scenario is using format string exploits against remote network services to gain access to the server that is hosting those services. Upon successful exploitation, the attacker is able to execute arbitrary code with the privileges of the user account that is running the network service. The attacker will usually bind a shell to a port and then connect to it to have a command line interface to the compromised system. 
&lt;/p&gt;&lt;p&gt;
Real-world format string vulnerability exploitation is mostly focused on Linux and UNIX style operating systems. Thanks to highly effective automated code analysis tools, format string vulnerabilities are somewhat rare in popular applications.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent format string vulnerabilities, don't use functions with format string parameters, don’t hard-code format strings, and don't allow users to manipulate format strings.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that functions with format string parameters are not used, that format strings are not hard-coded, and that users cannot manipulate format strings.
&lt;/p&gt;Specific Technology

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/9f06e83b-77bf-40b8-9f20-5f88e892630c"&gt;C++ Format String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/157c6e57-629d-4002-899a-1be6f2f18a1e&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>40faf627-61d1-459a-9fb4-e21040a90e84</RuleID>
        <RuleMatch>
          <Category>
            <Value>Poor Error Handling</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Poorly handled error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. 
&lt;/p&gt;&lt;p&gt;
Poorly handled error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Poorly handled error conditions may result in other, more serious vulnerabilities. A poorly handled error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce poorly handled errors, it creates a fertile field for the attacker to look for vulnerabilities.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used for unhandled exceptions, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/64ef29be-8402-4ee2-9cfe-78254c8c8a1b"&gt;Java Poor Error Handling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4381edc1-f65d-4520-8432-7c6e80537ada</RuleID>
        <RuleMatch>
          <Category>
            <Value>Poor Error Handling</Value>
          </Category>
          <Subcategory>
            <Value>Empty Catch Block</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Poorly handled error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. 
&lt;/p&gt;&lt;p&gt;
Poorly handled error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Poorly handled error conditions may result in other, more serious vulnerabilities. A poorly handled error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce poorly handled errors, it creates a fertile field for the attacker to look for vulnerabilities.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used for unhandled exceptions, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/64ef29be-8402-4ee2-9cfe-78254c8c8a1b"&gt;Java Poor Error Handling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>1c3ebba5-913a-4822-b521-67639c80b15f</RuleID>
        <RuleMatch>
          <Category>
            <Value>Poor Error Handling</Value>
          </Category>
          <Subcategory>
            <Value>Overly Broad Catch</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Poorly handled error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. 
&lt;/p&gt;&lt;p&gt;
Poorly handled error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Poorly handled error conditions may result in other, more serious vulnerabilities. A poorly handled error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce poorly handled errors, it creates a fertile field for the attacker to look for vulnerabilities.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used for unhandled exceptions, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/64ef29be-8402-4ee2-9cfe-78254c8c8a1b"&gt;Java Poor Error Handling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>40228a6d-d4e1-491e-92b1-4456300f00ca</RuleID>
        <RuleMatch>
          <Category>
            <Value>Poor Error Handling</Value>
          </Category>
          <Subcategory>
            <Value>Program Catches NullPointerException</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Poorly handled error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. 
&lt;/p&gt;&lt;p&gt;
Poorly handled error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Poorly handled error conditions may result in other, more serious vulnerabilities. A poorly handled error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce poorly handled errors, it creates a fertile field for the attacker to look for vulnerabilities.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used for unhandled exceptions, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/64ef29be-8402-4ee2-9cfe-78254c8c8a1b"&gt;Java Poor Error Handling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>ea05ea21-60b3-40e1-8fbb-4fab79a7fb38</RuleID>
        <RuleMatch>
          <Category>
            <Value>Poor Error Handling</Value>
          </Category>
          <Subcategory>
            <Value>Return Inside Finally</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Poorly handled error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. 
&lt;/p&gt;&lt;p&gt;
Poorly handled error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Poorly handled error conditions may result in other, more serious vulnerabilities. A poorly handled error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce poorly handled errors, it creates a fertile field for the attacker to look for vulnerabilities.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used for unhandled exceptions, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/64ef29be-8402-4ee2-9cfe-78254c8c8a1b"&gt;Java Poor Error Handling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>131b7ef6-2145-4201-b1e6-48d4976c661d</RuleID>
        <RuleMatch>
          <Category>
            <Value>Poor Error Handling</Value>
          </Category>
          <Subcategory>
            <Value>Swallowed ThreadDeath</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Poorly handled error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. 
&lt;/p&gt;&lt;p&gt;
Poorly handled error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Poorly handled error conditions may result in other, more serious vulnerabilities. A poorly handled error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce poorly handled errors, it creates a fertile field for the attacker to look for vulnerabilities.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used for unhandled exceptions, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/64ef29be-8402-4ee2-9cfe-78254c8c8a1b"&gt;Java Poor Error Handling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d76a5658-419f-410d-b55c-3bdba8bd0146</RuleID>
        <RuleMatch>
          <Category>
            <Value>Poor Error Handling</Value>
          </Category>
          <Subcategory>
            <Value>Throw Inside Finally</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Poorly handled error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. 
&lt;/p&gt;&lt;p&gt;
Poorly handled error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Poorly handled error conditions may result in other, more serious vulnerabilities. A poorly handled error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce poorly handled errors, it creates a fertile field for the attacker to look for vulnerabilities.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used for unhandled exceptions, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/64ef29be-8402-4ee2-9cfe-78254c8c8a1b"&gt;Java Poor Error Handling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/ac14838d-5bb2-45bf-bd03-60913b1b0b80&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>787fdf28-b17d-4cf5-a382-32016e3edba3</RuleID>
        <RuleMatch>
          <Category>
            <Value>Insecure Randomness</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Insecure randomness vulnerabilities occur when a pseudo-random number generator with poor entropy is used for cryptography. With poor entropy, the results of the cryptographic algorithm being used become easier to predict, thus weakening the cryptography overall. 
&lt;/p&gt;&lt;p&gt;
It is important to distinguish between encryption and cryptography in general: Encryption is a subset of cryptography, and refers to scrambling stored data in a manner that can be reversed, whereas cryptography is a more general term that refers to using a certain type of  algorithm for a practical application. 
&lt;/p&gt;&lt;p&gt;
Insecure randomness issues affect all applications that use cryptographic algorithms that require random numbers for proper operation (which is virtually all of them). 
&lt;/p&gt;Impact

&lt;p&gt;If a pseudo-random number generator with poor entropy is used, the cryptographic scheme can be broken in a short time. The exact impact depends on the cryptographic scheme being used and its purpose. One possible scenario is when a poor source of randomness is used to generate authentication keys - in this case an attacker will be able to generate unauthorized authentication keys. Another possible scenario is when a poor source of randomness is used as a part of an encryption scheme - in that case an attacker will be able to recover encrypted data.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent insecure randomness vulnerabilities, use a cryptographically strong pseudo-random number generator.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against insecure randomness vulnerabilities, make sure that a cryptographically strong pseudo-random number generator is used.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0a4a96d8-a365-4576-b2d2-b313c8753928"&gt;Java Insecure Randomness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5cdbc019-536d-4c36-ad03-de11031a0f04"&gt;PHP Insecure Randomness&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/79e3c551-71ae-4120-8542-a6f90823ede9" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/79e3c551-71ae-4120-8542-a6f90823ede9&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>88d8aae9-0a2b-4907-a5c9-99948fd99f07</RuleID>
        <RuleMatch>
          <Category>
            <Value>Insecure Randomness</Value>
          </Category>
          <Subcategory>
            <Value>Poor Seeding</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Insecure randomness vulnerabilities occur when a pseudo-random number generator with poor entropy is used for cryptography. With poor entropy, the results of the cryptographic algorithm being used become easier to predict, thus weakening the cryptography overall. 
&lt;/p&gt;&lt;p&gt;
It is important to distinguish between encryption and cryptography in general: Encryption is a subset of cryptography, and refers to scrambling stored data in a manner that can be reversed, whereas cryptography is a more general term that refers to using a certain type of  algorithm for a practical application. 
&lt;/p&gt;&lt;p&gt;
Insecure randomness issues affect all applications that use cryptographic algorithms that require random numbers for proper operation (which is virtually all of them). 
&lt;/p&gt;Impact

&lt;p&gt;If a pseudo-random number generator with poor entropy is used, the cryptographic scheme can be broken in a short time. The exact impact depends on the cryptographic scheme being used and its purpose. One possible scenario is when a poor source of randomness is used to generate authentication keys - in this case an attacker will be able to generate unauthorized authentication keys. Another possible scenario is when a poor source of randomness is used as a part of an encryption scheme - in that case an attacker will be able to recover encrypted data.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent insecure randomness vulnerabilities, use a cryptographically strong pseudo-random number generator.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against insecure randomness vulnerabilities, make sure that a cryptographically strong pseudo-random number generator is used.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/0a4a96d8-a365-4576-b2d2-b313c8753928"&gt;Java Insecure Randomness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5cdbc019-536d-4c36-ad03-de11031a0f04"&gt;PHP Insecure Randomness&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/79e3c551-71ae-4120-8542-a6f90823ede9" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/79e3c551-71ae-4120-8542-a6f90823ede9&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a06ace25-8dc1-4105-a253-c8400cefed54</RuleID>
        <RuleMatch>
          <Category>
            <Value>Often Misused</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;File upload vulnerabilities allow attackers to upload malicious code. (Technically, allowing users to upload anything that the application's design doesn't account for can be considered a file upload vulnerability. In practice, real file upload vulnerabilities are those that allow attackers to upload and execute malicious code.) 
&lt;/p&gt;&lt;p&gt;
The principle of Web Applications is that application files are executed as code when they are accessed via the Web server. If an attacker can upload his own application files and execute them by accessing them via the Web server, he can compromise the application. File upload vulnerabilities occur when the application allows users to upload files to Web accessible locations without placing sufficient restrictions on the kinds of files that can be uploaded. 
&lt;/p&gt;&lt;p&gt;
File upload issues affect all Web Applications that allow users to upload files.
&lt;/p&gt;Impact

&lt;p&gt;File upload vulnerabilites allow attackers to execute arbitrary code with the privileges of the application server. Using this vulnerability, the attacker will usually upload a small backdoor that will give him easy access to the application server's functions, such as performing file and database operations, executing operating system commands, executing arbitrary code that is sent in HTTP requests, and executing additional exploits. 
&lt;/p&gt;&lt;p&gt;
After installing the initial backdoor, the attacker is likely to use that backdoor to upload additional hacking tools to the server, depending on what the attacker wants to do. At that point, the application and all application data are compromised. If the server is not properly updated and hardened, the server itself is likely to be compromised as well. 
&lt;/p&gt;&lt;p&gt;
After gaining as much access as possible, the attacker will typically evaluate the value of the compromised application and server and decide how to abuse it for maximum profit, which usually translates into maximum damage for the owner of the application and the server. Some examples of abuse are: redirecting the application's users to exploit packs, using the server to send spam, defacing the application, leaking application data, selling application data on the black market, modifying application code to spy on users, using the server as a proxy for other attacks, using the server as a part of a DDoS botnet to attack other Internet hosts, etc.
&lt;/p&gt;Countermeasures

&lt;p&gt;File upload vulnerabilities can be prevented by storing uploaded files outside of web root and scrambling names of uploaded files.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against file upload vulnerabilities, check if uploaded files are stored outside of web root and if names of uploaded files are scrambled.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/de524f32-c3f0-452d-ba89-b6044a03a4e8"&gt;ASP.NET File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/387104b2-dacf-48e3-b0f7-148cd4c75711"&gt;Java File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fc1d8337-3bc1-40f5-bc88-db1575d5657a"&gt;PHP File Upload&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/1d3c6862-1cde-4764-bef2-b12bdac2fb8a" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/1d3c6862-1cde-4764-bef2-b12bdac2fb8a&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>5bef099d-cadb-47ed-8987-d4a33003bebb</RuleID>
        <RuleMatch>
          <Category>
            <Value>Often Misused</Value>
          </Category>
          <Subcategory>
            <Value>File Upload</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;File upload vulnerabilities allow attackers to upload malicious code. (Technically, allowing users to upload anything that the application's design doesn't account for can be considered a file upload vulnerability. In practice, real file upload vulnerabilities are those that allow attackers to upload and execute malicious code.) 
&lt;/p&gt;&lt;p&gt;
The principle of Web Applications is that application files are executed as code when they are accessed via the Web server. If an attacker can upload his own application files and execute them by accessing them via the Web server, he can compromise the application. File upload vulnerabilities occur when the application allows users to upload files to Web accessible locations without placing sufficient restrictions on the kinds of files that can be uploaded. 
&lt;/p&gt;&lt;p&gt;
File upload issues affect all Web Applications that allow users to upload files.
&lt;/p&gt;Impact

&lt;p&gt;File upload vulnerabilites allow attackers to execute arbitrary code with the privileges of the application server. Using this vulnerability, the attacker will usually upload a small backdoor that will give him easy access to the application server's functions, such as performing file and database operations, executing operating system commands, executing arbitrary code that is sent in HTTP requests, and executing additional exploits. 
&lt;/p&gt;&lt;p&gt;
After installing the initial backdoor, the attacker is likely to use that backdoor to upload additional hacking tools to the server, depending on what the attacker wants to do. At that point, the application and all application data are compromised. If the server is not properly updated and hardened, the server itself is likely to be compromised as well. 
&lt;/p&gt;&lt;p&gt;
After gaining as much access as possible, the attacker will typically evaluate the value of the compromised application and server and decide how to abuse it for maximum profit, which usually translates into maximum damage for the owner of the application and the server. Some examples of abuse are: redirecting the application's users to exploit packs, using the server to send spam, defacing the application, leaking application data, selling application data on the black market, modifying application code to spy on users, using the server as a proxy for other attacks, using the server as a part of a DDoS botnet to attack other Internet hosts, etc.
&lt;/p&gt;Countermeasures

&lt;p&gt;File upload vulnerabilities can be prevented by storing uploaded files outside of web root and scrambling names of uploaded files.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against file upload vulnerabilities, check if uploaded files are stored outside of web root and if names of uploaded files are scrambled.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/de524f32-c3f0-452d-ba89-b6044a03a4e8"&gt;ASP.NET File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/387104b2-dacf-48e3-b0f7-148cd4c75711"&gt;Java File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fc1d8337-3bc1-40f5-bc88-db1575d5657a"&gt;PHP File Upload&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/1d3c6862-1cde-4764-bef2-b12bdac2fb8a" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/1d3c6862-1cde-4764-bef2-b12bdac2fb8a&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>43e8d263-aed9-4a7c-b547-8da94b5e74a5</RuleID>
        <RuleMatch>
          <Category>
            <Value>System Information Leak</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A system information leak occurs when either the application or the application server discloses information about the web application platform that might be useful to the attacker. Some examples of information that might benefit the attacker are: the file system path of the application, the name and version of the operating system, the name and version of the web server software, and the name and version of the web application platform and its configuration options. 
&lt;/p&gt;&lt;p&gt;
The danger of system information leaks is that they make other attacks easier to carry out. In general, the application should volunteer as little information as possible about the platform on which it is running. 
&lt;/p&gt;&lt;p&gt;
This vulnerability type affects all applications.
&lt;/p&gt;Impact

&lt;p&gt;System information leaks can be used by attackers to exploit other vulnerabilities, if other vulnerabilities are present. By itself, a system information leak doesn't give an attacker any additional abilities. System information leaks have to be combined with other vulnerabilities to result in a compromise. For example, the operating system used by the application server might be outdated and vulnerable, but the attacker won't know that until the application tells him that the server is outdated. At that point, the attacker can use an exploit targeting the server operating system to compromise the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent system information leaks, be sure to handle all errors, use simple error messages, and disable platform banners.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against system information leaks, verify that all errors are handled, simple error messages are used, and platform banners are disabled.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/d2455286-ddf5-474b-b8c9-7cede24ef31a"&gt;ASP.NET System Information Leak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/829e3767-afca-4485-9fbb-8c7ab3be3061"&gt;PHP System Information Leak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/b2211d6a-c90a-4a42-8586-b364c3630d2c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/b2211d6a-c90a-4a42-8586-b364c3630d2c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>84097ac6-70f2-4072-a806-41e012838a73</RuleID>
        <RuleMatch>
          <Category>
            <Value>System Information Leak</Value>
          </Category>
          <Subcategory>
            <Value>PHP Errors</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A system information leak occurs when either the application or the application server discloses information about the web application platform that might be useful to the attacker. Some examples of information that might benefit the attacker are: the file system path of the application, the name and version of the operating system, the name and version of the web server software, and the name and version of the web application platform and its configuration options. 
&lt;/p&gt;&lt;p&gt;
The danger of system information leaks is that they make other attacks easier to carry out. In general, the application should volunteer as little information as possible about the platform on which it is running. 
&lt;/p&gt;&lt;p&gt;
This vulnerability type affects all applications.
&lt;/p&gt;Impact

&lt;p&gt;System information leaks can be used by attackers to exploit other vulnerabilities, if other vulnerabilities are present. By itself, a system information leak doesn't give an attacker any additional abilities. System information leaks have to be combined with other vulnerabilities to result in a compromise. For example, the operating system used by the application server might be outdated and vulnerable, but the attacker won't know that until the application tells him that the server is outdated. At that point, the attacker can use an exploit targeting the server operating system to compromise the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent system information leaks, be sure to handle all errors, use simple error messages, and disable platform banners.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against system information leaks, verify that all errors are handled, simple error messages are used, and platform banners are disabled.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/d2455286-ddf5-474b-b8c9-7cede24ef31a"&gt;ASP.NET System Information Leak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/829e3767-afca-4485-9fbb-8c7ab3be3061"&gt;PHP System Information Leak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/b2211d6a-c90a-4a42-8586-b364c3630d2c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/b2211d6a-c90a-4a42-8586-b364c3630d2c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>2df99029-b569-4bb4-93f0-a2f06987c1ad</RuleID>
        <RuleMatch>
          <Category>
            <Value>System Information Leak</Value>
          </Category>
          <Subcategory>
            <Value>PHP Version</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A system information leak occurs when either the application or the application server discloses information about the web application platform that might be useful to the attacker. Some examples of information that might benefit the attacker are: the file system path of the application, the name and version of the operating system, the name and version of the web server software, and the name and version of the web application platform and its configuration options. 
&lt;/p&gt;&lt;p&gt;
The danger of system information leaks is that they make other attacks easier to carry out. In general, the application should volunteer as little information as possible about the platform on which it is running. 
&lt;/p&gt;&lt;p&gt;
This vulnerability type affects all applications.
&lt;/p&gt;Impact

&lt;p&gt;System information leaks can be used by attackers to exploit other vulnerabilities, if other vulnerabilities are present. By itself, a system information leak doesn't give an attacker any additional abilities. System information leaks have to be combined with other vulnerabilities to result in a compromise. For example, the operating system used by the application server might be outdated and vulnerable, but the attacker won't know that until the application tells him that the server is outdated. At that point, the attacker can use an exploit targeting the server operating system to compromise the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent system information leaks, be sure to handle all errors, use simple error messages, and disable platform banners.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against system information leaks, verify that all errors are handled, simple error messages are used, and platform banners are disabled.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/d2455286-ddf5-474b-b8c9-7cede24ef31a"&gt;ASP.NET System Information Leak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/829e3767-afca-4485-9fbb-8c7ab3be3061"&gt;PHP System Information Leak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/b2211d6a-c90a-4a42-8586-b364c3630d2c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/b2211d6a-c90a-4a42-8586-b364c3630d2c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>be9c7ff5-f40a-4504-94c5-b095f4ef127c</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>7cf616b4-765e-4ddd-9c6e-c5892307af2a</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>Cookie not Sent Over SSL</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>612b9f7c-fe56-4b3d-9800-f53d029a9d22</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>HTTPOnly not Set</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>35f6c992-bee6-46e2-af79-d519831ed91b</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>HTTPOnly not Set on Application Cookie</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c5e31abd-619e-40c8-a01e-dd6a23113caa</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>HTTPOnly not Set on Session Cookie</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>38195bf5-4d42-4c2d-980b-79523b09940a</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>Overly Broad Domain</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4a88bea8-a2be-4f4e-8c32-45ecaaf47c95</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>Overly Broad Path</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>bb4b8030-2e23-4687-be10-10af6d641d31</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>Overly Broad Session Cookie Domain</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>03b17bde-6e50-4afc-a79f-4503523c445a</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>Persistent Cookie</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>f6b7c09a-4622-4430-93a8-3078c70e791b</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>Persistent Session Cookie</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>eb1ec32c-0140-4e86-a470-55fed191192b</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cookie Security</Value>
          </Category>
          <Subcategory>
            <Value>Session Cookie not Sent Over SSL</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Measures that can be used to protect cookies are listed in the &lt;strong&gt;Countermeasures&lt;/strong&gt; section of this article (see below). 
&lt;/p&gt;&lt;p&gt;
Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. 
&lt;/p&gt;&lt;p&gt;
Cookie security issues affect all web applications that use cookies.
&lt;/p&gt;Impact

&lt;p&gt;The exact impact of cookie security issues depends on the kind of data stored in the vulnerable cookie and the manner in which it is exposed. The most common serious cookie security issues are exposing session identifiers to cross-site scripting or man-in-the-middle attacks. Once the attacker has compromised the session identifier, he can impersonate the authenticated user to the application and perform any actions that don't require re-authentication on behalf of that user. The exact actions that are available are different for different applications, but, for non-privileged users, the impact will typically be limited to some mischief. If the compromised user has administrative privileges, the attacker might be able to upload malicious code to the web server and execute it with the privileges of the web server. If the attacker is able to execute arbitrary application code, they will have full control of the application and its data, and have the ability to abuse the web server.
&lt;/p&gt;Countermeasures

&lt;p&gt;To protect sensitive cookies, set the HTTPOnly flag, set the Secure flag, send cookies only over SSL/TLS, set strict domain and path values, and ensure that sensitive cookies are not  persistent.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection of sensitive cookies, verify that the HTTPOnly flag is set, the Secure flag is set, sensitive cookies are sent only over SSL/TLS, strict domain and path values are set, and sensitive cookies are not persistent.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/f3aa0389-da45-47cf-8ace-4a71d006958d"&gt;ASP.NET Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/5b5754fa-53f7-467e-93c5-ff4dc8c2f32b"&gt;Java Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/acc078c3-b325-4430-a521-c91e47b40305"&gt;PHP Cookie Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/874d5f27-5b42-41e9-accb-141719b1a681&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
    </RuleDefinitions>
  </Rules>
</RulePack>