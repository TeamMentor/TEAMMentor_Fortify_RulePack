<?xml version="1.0" encoding="utf-16"?>
<RulePack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="xmlns://www.fortifysoftware.com/schema/rules">
  <RulePackID>7402863d-21dc-43f8-a8c1-34461e93efeb</RulePackID>
  <SKU>fac0f015-cd79-456f-969b-d807d56824f3</SKU>
  <Name>TeamMentor Secure Coding Rules version 1.0</Name>
  <Version>1.0</Version>
  <Description>TeamMentor Secure Coding Rules version 1.0</Description>
  <Rules version="3.11">
    <RuleDefinitions>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>8c5b4144-aef1-4c67-a35c-748afa995ab3</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>b3eb595d-7ca7-43d8-b599-8d5033918094</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>Castle ActiveRecord</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>f7bdf21f-08bb-4bb8-aa55-a1032bc89c57</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>Hibernate</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d1929994-6b2c-4d8e-947f-8e27c0a3a427</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>iBatis Data Map</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a468e366-df12-4a84-9956-ef91d7cf1a39</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>JDO</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4f5507d1-bf69-423d-866e-04e6024148e6</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>LINQ</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4fa73702-9e9f-4934-8328-91e74d8444d8</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>NHibernate</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>0ca8b48d-01b5-4418-87e9-4ba96933e9c6</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>Persistence</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>befbc3b5-afa3-4c18-93ae-903fb62a98ba</RuleID>
        <RuleMatch>
          <Category>
            <Value>SQL Injection</Value>
          </Category>
          <Subcategory>
            <Value>SubSonic</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. 
&lt;/p&gt;Impact

&lt;p&gt;SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, validate all input and use parameterized APIs for database access.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all queries generated by the application and verify that all user input is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000020f062"&gt;ASP.NET SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000636321"&gt;Java SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000729437"&gt;PHP SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/c4914e51-2609-4edc-8133-31491f1b03c0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>6144bc43-4061-4896-87cc-35732bb26fe4</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005c8c98"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000041db4"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000001bda60"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>1d4ecbeb-6bb3-4dac-9a58-ab8f1aa321f7</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>DOM</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005c8c98"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000041db4"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000001bda60"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>79ba248f-e49d-4bec-9f74-035df41f7663</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>External Links</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005c8c98"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000041db4"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000001bda60"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>53be1428-9664-4c56-a936-0b201ddb51e0</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>Persistent</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005c8c98"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000041db4"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000001bda60"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>1286a4e2-6245-4c6b-9c9c-0fa855eae390</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>Poor Validation</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005c8c98"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000041db4"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000001bda60"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d05a64c3-4a40-4770-b345-1a2fbb829db8</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Scripting</Value>
          </Category>
          <Subcategory>
            <Value>Reflected</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.
&lt;/p&gt;&lt;p&gt;
There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. 
&lt;/p&gt;Impact

&lt;p&gt;Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input, and encode all input that is included in output.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005c8c98"&gt;ASP.NET Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000041db4"&gt;Java Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000001bda60"&gt;PHP Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;Additional Resources

&lt;ul&gt;&lt;li&gt; For more information about Cross-Site Scripting, see &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/683d33a8-7979-4307-8cf0-3a82457f9f47&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>1cc8a19b-1a71-4ab9-ad0d-a027427d4378</RuleID>
        <RuleMatch>
          <Category>
            <Value>Command Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Applications often execute external commands as a part of their functionality. If the attacker is able to manipulate the choice of external commands or their parameters, the attacker may be able to use this functionality to execute arbitrary commands. If an attacker is able to execute arbitrary commands, he is typically able to take over the application and possibly take over the entire system. All applications that use external applications are affected by command injection vulnerabilities. Web applications are especially at risk, because they are exposed to the Internet. 
&lt;/p&gt;Impact

&lt;p&gt;Command injection allows an attacker to execute arbitrary commands. Using this vulnerability, an attacker can take full control of the application. If the attacker is able to leverage additional vulnerabilities or the server is not configured properly, this vulnerability may allow the attacker to take full control of the server. A command injection vulnerability acts as a virtual backdoor for an attacker to use the application and the server for his purposes. Any data that may be stored by or accessed by the application can also be compromised as a result of command injection. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent command injection vulnerabilities, validate all input, use parameterized APIs to execute external commands if such APIs are available, and avoid using external commands if possible. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all code that executes external applications and make sure that it does not use unvalidated input. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000007a1206"&gt;ASP.NET Command Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000859bca"&gt;Java Command Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/94e52aca-06b6-4747-9bc9-f0149208f18c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/94e52aca-06b6-4747-9bc9-f0149208f18c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>9c2583b4-9a26-4d02-a20f-d58c682066c9</RuleID>
        <RuleMatch>
          <Category>
            <Value>Cross-Site Request Forgery</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;A cross site request forgery (CSRF) attack occurs when an attacker tricks a victim into loading a page that contains a malicious request. This request may be able to change the state of the web application, and is possible because the request is sent in the context of the logged in victim. For many sites, each request automatically sends the victim's credentials, such as the session cookie or authentication credentials. Due to this fact, there is no way to distinguish the false request from a legitimate request. CSRF vulnerabilities affect web applications that allow authenticated users to perform operations that are not available to guest users. 
&lt;/p&gt;&lt;p&gt;
Cross site request forgery attacks are known by other names including XSRF, session riding, one-click and zero-click attacks. A one-click attack refers to a link that causes a malicious action to be performed when a victim clicks on it. A zero-click attack is automatically executed upon page load. A common way to perform a zero-click attack is to embed the request in the source of an image. 
&lt;/p&gt;Impact

&lt;p&gt;CSRF allows the attacker to carry out actions on behalf of an authenticated user by tricking the user into visiting a malicious page or link. The exact impact depends on the functionality that is vulnerable to CSRF. The attacker will usually try to add a privileged user account for himself or to inject arbitrary code into the application. If either of those scenarios succeeds, the attacker gains full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent CSRF, include unique tokens in pages that invoke security sensitive operations, and require users to re-authenticate before performing sensitive operations. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against CSRF, ensure that unique tokens are used in pages that carry out sensitive operations, and that users are required to re-authenticate before performing sensitive operations.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000956375"&gt;ASP.NET Cross-Site Request Forgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000007c30fb"&gt;Java Cross-Site Request Forgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000000a973e"&gt;PHP Cross-Site Request Forgery&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/62f78eb2-9eba-484c-ade3-7b54c2df9e5a" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/62f78eb2-9eba-484c-ade3-7b54c2df9e5a&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>b79c1115-92f8-408c-b96f-784f973d18f5</RuleID>
        <RuleMatch>
          <Category>
            <Value>Dangerous File Inclusion</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Remote file inclusion (RFI) occurs when the application executes a file located on an external server, which is usually controlled by the attacker. This enables the attacker to execute arbitrary code as a part of the application, in effect allowing them to do anything that the application and the application platform can do. It could potentially result in the attacker gaining complete control of the system. RFI affects PHP applications. 
&lt;/p&gt;Impact

&lt;p&gt;Remote file inclusion allows an attacker to execute arbitrary code with great ease. Usually, RFI is exploited by specifying a URL to the attacker's script of choice as a part of the HTTP request. The vulnerable application loads the malicious script from the URL and executes it as a part of the application. The attacker will typically use a "web shell" as the attack script and as a result gain full control of the application platform. From there, the attacker may leverage additional vulnerabilities to take full control of the server. Actually, the attacker usually has no need to go this far, because taking full control of the application platform will usually give him all the access he wants. If there is something particularly valuable on the target network, the attacker may use the compromised server to pivot his way around the network and attack other machines on it.
&lt;/p&gt;&lt;p&gt;
RFI is extremely easy to exploit and to automate, which has led to RFI vulnerabilities being used to create powerful botnets in 2011. These botnets were used for numerous high-profile DDoS attacks. As a result, RFI became well known and a simple mitigation measure, disabling loading remote PHP scripts, became well known. At this point, RFI is relatively rare because most hosting providers know to disable loading external PHP scripts. RFI is still an extremely dangerous vulnerability that can be easily avoided by configuring PHP accordingly. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent RFI, configure PHP for security. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against RFI, ensure that PHP is configured for security. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000780d71"&gt;PHP Remote File Inclusion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/4a8034cb-e024-4ccb-a5f7-d7397dfc1371" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/4a8034cb-e024-4ccb-a5f7-d7397dfc1371&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>ec43cfd5-542e-4597-ab76-f2f3c0e2a163</RuleID>
        <RuleMatch>
          <Category>
            <Value>Dynamic Code Evaluation</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Scripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application. Code injection vulnerabilities affect all scripting languages, but typically occur in web applications written in PHP.  
&lt;/p&gt;Impact

&lt;p&gt;An attacker gains full control of the application and the ability to use any operating system functions that are available to the scripting environment. Code injection is one of the most dangerous vulnerability types, if not the most dangerous. On top of being extremely powerful, code injection vulnerabilities are typically easy to exploit, especially in web applications. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent code injection vulnerabilities, validate all input and avoid using dangerous functions. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all the calls to dangerous functions and verify that data passed to them is sufficiently validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000000b0d98"&gt;ASP.NET Code Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000057c0df"&gt;PHP Code Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>b3eaeaa5-7650-4cb8-8c28-788b79811ab7</RuleID>
        <RuleMatch>
          <Category>
            <Value>Dynamic Code Evaluation</Value>
          </Category>
          <Subcategory>
            <Value>Code Injection</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Scripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application. Code injection vulnerabilities affect all scripting languages, but typically occur in web applications written in PHP.  
&lt;/p&gt;Impact

&lt;p&gt;An attacker gains full control of the application and the ability to use any operating system functions that are available to the scripting environment. Code injection is one of the most dangerous vulnerability types, if not the most dangerous. On top of being extremely powerful, code injection vulnerabilities are typically easy to exploit, especially in web applications. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent code injection vulnerabilities, validate all input and avoid using dangerous functions. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all the calls to dangerous functions and verify that data passed to them is sufficiently validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000000b0d98"&gt;ASP.NET Code Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000057c0df"&gt;PHP Code Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>38fbfaf8-212d-4c4c-96bd-6c720dd13f47</RuleID>
        <RuleMatch>
          <Category>
            <Value>Key Management</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Applications that use cryptography need a method for managing keys. One of the simplest ways to store the keys is to hard-code them into the application. However, this approach is not secure, because anyone with access to the application code is able to recover the keys. Once an attacker has recovered the keys, he can use them to decrypt sensitive data. This vulnerability applies to all applications that use cryptography. 
&lt;/p&gt;Impact

&lt;p&gt;An attacker that has access to the application code is able to recover any hard-coded cryptographic keys. If the attacker gets access to the data encrypted with those keys, he will be able to decrypt them. The trouble is that if the attacker is able to get the encrypted data, he can probably get the application code as well. Therefore, using hard-coded cryptographic keys essentially defeats the purpose of using encryption in the first place. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, provide a secure admin interface that allows for managing encryption keys, and use protected storage APIs to store the keys. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that a secure admin interface that allows for managing cryptographic keys is provided, and examine all code that uses encryption to ensure that encryption keys are stored using protected storage APIs.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000063602"&gt;ASP.NET Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000057d3ef"&gt;Java Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000071654"&gt;PHP Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>a22095ee-4da2-4fcd-8688-834af42089b0</RuleID>
        <RuleMatch>
          <Category>
            <Value>Key Management</Value>
          </Category>
          <Subcategory>
            <Value>Hardcoded Encryption Key</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Applications that use cryptography need a method for managing keys. One of the simplest ways to store the keys is to hard-code them into the application. However, this approach is not secure, because anyone with access to the application code is able to recover the keys. Once an attacker has recovered the keys, he can use them to decrypt sensitive data. This vulnerability applies to all applications that use cryptography. 
&lt;/p&gt;Impact

&lt;p&gt;An attacker that has access to the application code is able to recover any hard-coded cryptographic keys. If the attacker gets access to the data encrypted with those keys, he will be able to decrypt them. The trouble is that if the attacker is able to get the encrypted data, he can probably get the application code as well. Therefore, using hard-coded cryptographic keys essentially defeats the purpose of using encryption in the first place. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, provide a secure admin interface that allows for managing encryption keys, and use protected storage APIs to store the keys. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, ensure that a secure admin interface that allows for managing cryptographic keys is provided, and examine all code that uses encryption to ensure that encryption keys are stored using protected storage APIs.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000063602"&gt;ASP.NET Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000057d3ef"&gt;Java Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000071654"&gt;PHP Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/275c194d-3f0d-46d8-a874-8584bf0fce30&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>8dbdfa2c-7346-47cb-a708-257a3b7c8cbd</RuleID>
        <RuleMatch>
          <Category>
            <Value>LDAP Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Lightweight Directory Access Protocol (LDAP) is a widely used protocol for accessing directory services. Directories provide a set of attributes about people that are organized in a hierarchical manner.  LDAP Injection is a technique to exploit applications that use input from users to query an LDAP directory. LDAP injection has the potential to view, modify, or remove personal information about anyone in the directory. LDAP Injection applies to all applications that use LDAP. 
&lt;/p&gt;Impact

&lt;p&gt;LDAP injection allows an attacker to access and/or modify restricted data in the LDAP database. The attacker may leverage this vulnerability to view personal information of users in the database. The attacker may also leverage this vulnerability to give himself administrative privileges or to take over another account. Once the attacker has administrative privileges, he usually has full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent LDAP injection, validate all input. Ideally, parameterized APIs should be used for LDAP queries, but such APIs are usually not available. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all code that queries directories and verify that data included in the queries is sufficiently validated. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005635d7"&gt;ASP.NET LDAP Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000018af4"&gt;Java LDAP Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/8eba1b70-1b1a-4810-a819-1c212cf33099" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/8eba1b70-1b1a-4810-a819-1c212cf33099&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>10ebf48b-8654-4f77-83c0-5a2f65f736ff</RuleID>
        <RuleMatch>
          <Category>
            <Value>Log Forging</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Log forging occurs when an attacker is able to modify log entries recorded by the application. This usually occurs when the application writes some part of user input to the log files verbatim, which allows an attacker to insert special characters into the log files. Special characters may be processed by the application to change the contents of the files or render them unusable. The threat of log forging is that it may allow an attacker to hide traces of the attacks. In extreme cases, an attacker may forge logs to implicate someone else in the attacks. This vulnerability type affects all applications.  To check for adequate protection, make sure that all input is validated, and especially ensure that all user data that is logged is validated.
&lt;/p&gt;Impact

&lt;p&gt;Log forging allows an attacker to tamper with the logs. Usually, the attacker will try to insert special characters in an attempt to remove a part of the log or make it invisible from within the application. If the attacker can hide a part of the log, it allows him to hide some of the traces of his attack(s). This makes it harder to detect the attack when it is taking place and also makes it harder to investigate the attack afterwards. In a more extreme case that is rarely seen in practice, an attacker may insert data into the logs to implicate someone else in the attacks and send the investigators down the wrong path. These days, attackers usually rely on some form of proxy or tunnel technology to hide themselves, rather than modifying the logs, but this vulnerability type still exists.
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input and validate user data which is logged.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, make sure that all input is validated, and especially ensure that all user data that is logged is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000003a5a7d"&gt;ASP.NET Log Forging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005512a8"&gt;Java Log Forging&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/4f84a5c0-b513-4054-8f1a-1ff1367de03b" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/4f84a5c0-b513-4054-8f1a-1ff1367de03b&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c23b263d-5ce2-486e-b477-1291563071ce</RuleID>
        <RuleMatch>
          <Category>
            <Value>Missing XML Validation</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Missing XML validation means that an attacker may cause the application to parse invalid XML data. This vulnerability type refers specifically to not validating XML against a schema. In itself, this might not cause any harm, but it may enable other vulnerabilities, such as XML Entity Injection. This vulnerability type affects all applications that parse XML data. 
&lt;/p&gt;Impact

&lt;p&gt;Missing XML validation may enable other attacks that exploit other vulnerabilities. The exact impact depends on the kind of other vulnerabilities that are enabled. The most likely and dangerous scenario is some form of XML injection attack, where the attack manipulates application data by sending malformed XML data. For example, if the application uses XML to store authentication credentials, the attacker may be able to send XML data that authenticates him as an administrative user, and he may then take over the application. For that to be possible, a number of other vulnerabilities in addition to missing XML validation would need to be present. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, validate untrusted XML data.  XML validation helps prevent attacks that exploit other vulnerabilities, and should always be used when untrusted XML data is processed.
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that untrusted XML data is validated.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/099d9a5b-3ac2-4acb-9192-5b6d7fafda34"&gt;ASP.NET Missing XML Validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/fa554526-0e27-470f-ba6c-464c2250cfbd"&gt;Java Missing XML Validation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/907797a3-3e9c-4cd8-ac5d-261209092414" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/907797a3-3e9c-4cd8-ac5d-261209092414&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>e41ada72-d50f-46e9-915d-4f8d9de7ba6f</RuleID>
        <RuleMatch>
          <Category>
            <Value>Open Redirect</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Many web applications use URL redirection to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker may be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website. This vulnerability applies to all applications that use URL redirection. 
&lt;/p&gt;Impact

&lt;p&gt;Open redirects allow an attacker to send users to a malicious site via a legitimate-looking URL. Many users are tricked by the legitimate-looking URL into thinking that they are browsing a trusted site. The malicious site may have an authentic looking login page, which tempts unsuspecting users into entering their usernames and passwords. When personal information is entered into the malicious login page, it is recorded for the attacker's use. Once the attacker has valid user credentials, he can access or modify users' data in the application. If the attacker is able to take over an administrative account, he may gain full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, avoid using redirects altogether, if possible.  If redirects are necessary, avoid redirection based on user input if possible. If user input is necessary for redirects, use reference maps to limit permissible redirect destinations, and always validate destinations of redirects. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this problem, choose the application check that fits the above Countermeasures strategy that you have chosen:  Ensure that redirects are not used.  OR  Ensure that redirection is not based on user input.  OR  If user input is needed, ensure that reference maps are used to limit permissible redirect destinations, and always validate the destinations of redirects.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000003a00a"&gt;ASP.NET Open Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000000a5e9a"&gt;Java Open Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000025d26a"&gt;PHP Open Redirect&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/90608236-847e-47ff-bb8f-b551297a25af" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/90608236-847e-47ff-bb8f-b551297a25af&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d50494de-ed3e-48f0-984b-6e4e92af150e</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>4de323b3-2b9f-4edc-9bf6-c5cecaa3fd34</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Empty Password</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>efe8e456-c526-4e02-ba87-7404ead90ccc</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Empty Password in Configuration File</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>6ff53d06-c2dd-46ec-ad72-ed1bd881c65d</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Hardcoded Password</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>cb3dd759-574e-44e6-ad44-a1c0bea944d0</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Null Password</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>f9c75b0a-4333-495a-babf-442939cd3ae4</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Password in Comment</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>8beb203c-2611-433b-9391-c552b0c3cb58</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Password in Configuration File</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Applications that use authentication need a method for storing passwords. One of the simplest ways to store passwords is to hard-code them into the application. This approach is not secure, because anyone with access to the application code is able to recover these passwords. Once an attacker has recovered the passwords, he can use them to authenticate with the application. 
&lt;/p&gt;Impact

&lt;p&gt;Once the attacker has obtained the hard-coded password, he can use it to access the application. Usually, administrative passwords are the ones that are hard-coded. In that case, the attacker gains full access to the application. The attacker may be able to leverage this access to take full control of the application server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, provide a secure admin interface that allows changing passwords, and store passwords securely. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, examine all code that uses authentication and find where it stores the passwords. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000038d138"&gt;ASP.NET Use of Hard-coded Password&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000133551"&gt;Java Use of Hard-coded Password&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/6c6f2433-222d-4568-8de6-9cbdd198dbc0" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/6c6f2433-222d-4568-8de6-9cbdd198dbc0&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>420f4d34-3b43-4e96-a3ed-97ce0467338e</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Password in Redirect</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>b1c47258-4b80-4d57-aed3-9a36bd2594f5</RuleID>
        <RuleMatch>
          <Category>
            <Value>Password Management</Value>
          </Category>
          <Subcategory>
            <Value>Weak Cryptography</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes vis a man-in-the-middle attack. All applications that use authentication are affected by this vulnerability type. 
&lt;/p&gt;Impact

&lt;p&gt;An insufficiently protected credential vulnerability makes it easier for an attacker to gain access to the authentication credentials. Usually, some other vulnerability has to be present for the attacker to recover the credentials. Once the attacker has the credentials, he can impersonate the user whose credentials have been compromised. Malicious hackers usually target privileged accounts to take over the application. After taking over the application, an attacker may leverage other vulnerabilities to take over the application platform and use it to pivot for other attacks. Compromising the application also gives the attacker access to user data, thus enabling him to impersonate the user. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability type, use PBKDF2 to secure passwords and send authentication credentials over encrypted tunnels. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability type, verify that PBKDF2 is used to secure passwords and that authentication credentials are never sent in plain-text. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000417cfc"&gt;ASP.NET Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000005304d5"&gt;Java Insufficiently Protected Credentials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/57829386-5df5-4f7f-993a-3552ab3a292c&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>d608439d-c941-4664-8d59-0e7669855da9</RuleID>
        <RuleMatch>
          <Category>
            <Value>Path Manipulation</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;Some applications allow the user to choose what files to access. Some of these applications don't validate the selected file path sufficiently. This path traversal vulnerability allows an attacker to access files outside of the locations authorized by the application. Path traversal vulnerabilities typically affect web applications.  
&lt;/p&gt;Impact

&lt;p&gt;Using path traversal, an attacker is able to access files outside of the scope allowed by the application. The attacker may then access sensitive operating system files, and application configuration files that include connection strings, application source code, and other sensitive data. The attacker will usually attempt to leverage information gathered using path traversal to take full control of the application or the application server. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this problem, canonicalize all file paths and name input, validate all input, and perform access control checks for any filesystem access.
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000871a68"&gt;ASP.NET Path Traversal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000003bcfab"&gt;PHP Path Traversal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/b0a8079f-fda0-46d9-bc3b-20ac08334e75" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/b0a8079f-fda0-46d9-bc3b-20ac08334e75&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>f71a1516-dc70-4824-b2c9-62973059fb58</RuleID>
        <RuleMatch>
          <Category>
            <Value>XPath Injection</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>&lt;b&gt;Description Powered by Security Innovation &lt;a href="https://teammentor.net/teamMentor" target="_blank"&gt;TeamMentor.net &lt;/a&gt; 

&lt;/b&gt;&lt;p&gt;XPath injection is a type of vulnerability that allows attackers to execute arbitrary queries on XML databases. XPath injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XPath injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents. XPath injection applies to any application that uses XPath to query XML documents. 
&lt;/p&gt;Impact

&lt;p&gt;XPath injection attacks may allow an attacker to retrieve, manipulate, or destroy data stored in XML documents. The exact impact depends on the type of XML data that is exposed via XPath injection. If authentication data is exposed, the attacker is able to take over any user account. By taking over the administrator's account, the attacker is able to take full control of the application. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent this vulnerability, validate all input and use parameterized APIs if possible. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, find all code that uses XPath queries and make sure it does not include unvalidated user input. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-00000047aad7"&gt;ASP.NET XPath Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/5ef5eea8-07c2-41de-80f9-7f62aaf0e3c8" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/5ef5eea8-07c2-41de-80f9-7f62aaf0e3c8&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>c369c23b-cb18-4163-ad0c-5bfa36e8f15a</RuleID>
        <RuleMatch>
          <Category>
            <Value>ASP.NET Misconfiguration</Value>
          </Category>
          <Subcategory>
            <Value />
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>Description

&lt;p&gt;Unchecked error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. Unchecked error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Unchecked error conditions may result in other, more serious vulnerabilities. An unchecked error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce unchecked errors, that creates a fertile field for the attacker to look for vulnerabilities. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000373cc0"&gt;ASP.NET Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000008e7f60"&gt;Java Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
      <CustomDescriptionRule formatVersion="3.2">
        <RuleID>53a3d19e-fedc-4587-81ed-403bfdce7099</RuleID>
        <RuleMatch>
          <Category>
            <Value>ASP.NET Misconfiguration</Value>
          </Category>
          <Subcategory>
            <Value>Missing Error Handling</Value>
          </Subcategory>
        </RuleMatch>
        <Description>
          <Explanation>Description

&lt;p&gt;Unchecked error conditions may allow attacks to go unnoticed. Checking error conditions helps the application to determine if something out of the ordinary is happening and to log that information. Log information helps administrators determine when an attack is taking place and provides information about the attack. Unchecked error condition flaws may occur in any type of application. 
&lt;/p&gt;Impact

&lt;p&gt;Unchecked error conditions may result in other, more serious vulnerabilities. An unchecked error condition may not actually give any advantage to the attacker. However, if the application contains a lot of code that may produce unchecked errors, that creates a fertile field for the attacker to look for vulnerabilities. 
&lt;/p&gt;Countermeasures

&lt;p&gt;To prevent unchecked error conditions, use structured exception handling, use a global exception handler for unhandled exceptions, and log error information. 
&lt;/p&gt;Application Check

&lt;p&gt;To check for adequate protection against this vulnerability, verify that structured exception handling is used, a global exception handler is used, and error information is logged. 
&lt;/p&gt;Specific Technologies

&lt;ul&gt;&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-000000373cc0"&gt;ASP.NET Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://vulnerabilities.teammentor.net/article/00000000-0000-0000-0000-0000008e7f60"&gt;Java Unchecked Error Condition&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</Explanation>
          <Recommendations>For further reference visit TeamMentor page: &lt;a href="https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343" target="_blank"&gt;https://vulnerabilities.teammentor.net/article/0230d542-313e-4931-9d89-6161ad0ad343&lt;/a&gt;</Recommendations>
        </Description>
      </CustomDescriptionRule>
    </RuleDefinitions>
  </Rules>
</RulePack>